!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e(jQuery)}(function(e){e.extend(e.fn,{validate:function(t){if(this.length){var i=e.data(this[0],"validator");return i||(this.attr("novalidate","novalidate"),i=new e.validator(t,this[0]),e.data(this[0],"validator",i),i.settings.onsubmit&&(this.on("click.validate",":submit",function(t){i.settings.submitHandler&&(i.submitButton=t.target),e(this).hasClass("cancel")&&(i.cancelSubmit=!0),void 0!==e(this).attr("formnovalidate")&&(i.cancelSubmit=!0)}),this.on("submit.validate",function(t){function n(){var n,s;return!i.settings.submitHandler||(i.submitButton&&(n=e("<input type='hidden'/>").attr("name",i.submitButton.name).val(e(i.submitButton).val()).appendTo(i.currentForm)),s=i.settings.submitHandler.call(i,i.currentForm,t),i.submitButton&&n.remove(),void 0!==s&&s)}return i.settings.debug&&t.preventDefault(),i.cancelSubmit?(i.cancelSubmit=!1,n()):i.form()?i.pendingRequest?(i.formSubmitted=!0,!1):n():(i.focusInvalid(),!1)})),i)}t&&t.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing.")},valid:function(){var t,i,n;return e(this[0]).is("form")?t=this.validate().form():(n=[],t=!0,i=e(this[0].form).validate(),this.each(function(){t=i.element(this)&&t,n=n.concat(i.errorList)}),i.errorList=n),t},rules:function(t,i){var n,s,a,r,o,l,c=this[0];if(t)switch(n=e.data(c.form,"validator").settings,s=n.rules,a=e.validator.staticRules(c),t){case"add":e.extend(a,e.validator.normalizeRule(i)),delete a.messages,s[c.name]=a,i.messages&&(n.messages[c.name]=e.extend(n.messages[c.name],i.messages));break;case"remove":return i?(l={},e.each(i.split(/\s/),function(t,i){l[i]=a[i],delete a[i],"required"===i&&e(c).removeAttr("aria-required")}),l):(delete s[c.name],a)}return(r=e.validator.normalizeRules(e.extend({},e.validator.classRules(c),e.validator.attributeRules(c),e.validator.dataRules(c),e.validator.staticRules(c)),c)).required&&(o=r.required,delete r.required,r=e.extend({required:o},r),e(c).attr("aria-required","true")),r.remote&&(o=r.remote,delete r.remote,r=e.extend(r,{remote:o})),r}}),e.extend(e.expr[":"],{blank:function(t){return!e.trim(""+e(t).val())},filled:function(t){return!!e.trim(""+e(t).val())},unchecked:function(t){return!e(t).prop("checked")}}),e.validator=function(t,i){this.settings=e.extend(!0,{},e.validator.defaults,t),this.currentForm=i,this.init()},e.validator.format=function(t,i){return 1===arguments.length?function(){var i=e.makeArray(arguments);return i.unshift(t),e.validator.format.apply(this,i)}:(arguments.length>2&&i.constructor!==Array&&(i=e.makeArray(arguments).slice(1)),i.constructor!==Array&&(i=[i]),e.each(i,function(e,i){t=t.replace(new RegExp("\\{"+e+"\\}","g"),function(){return i})}),t)},e.extend(e.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:e([]),errorLabelContainer:e([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(e){this.lastActive=e,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,e,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(e)))},onfocusout:function(e){this.checkable(e)||!(e.name in this.submitted)&&this.optional(e)||this.element(e)},onkeyup:function(t,i){var n=[16,17,18,20,35,36,37,38,39,40,45,144,225];9===i.which&&""===this.elementValue(t)||-1!==e.inArray(i.keyCode,n)||(t.name in this.submitted||t===this.lastElement)&&this.element(t)},onclick:function(e){e.name in this.submitted?this.element(e):e.parentNode.name in this.submitted&&this.element(e.parentNode)},highlight:function(t,i,n){"radio"===t.type?this.findByName(t.name).addClass(i).removeClass(n):e(t).addClass(i).removeClass(n)},unhighlight:function(t,i,n){"radio"===t.type?this.findByName(t.name).removeClass(i).addClass(n):e(t).removeClass(i).addClass(n)}},setDefaults:function(t){e.extend(e.validator.defaults,t)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date ( ISO ).",number:"Please enter a valid number.",digits:"Please enter only digits.",creditcard:"Please enter a valid credit card number.",equalTo:"Please enter the same value again.",maxlength:e.validator.format("Please enter no more than {0} characters."),minlength:e.validator.format("Please enter at least {0} characters."),rangelength:e.validator.format("Please enter a value between {0} and {1} characters long."),range:e.validator.format("Please enter a value between {0} and {1}."),max:e.validator.format("Please enter a value less than or equal to {0}."),min:e.validator.format("Please enter a value greater than or equal to {0}.")},autoCreateRanges:!1,prototype:{init:function(){function t(t){var i=e.data(this.form,"validator"),n="on"+t.type.replace(/^validate/,""),s=i.settings;s[n]&&!e(this).is(s.ignore)&&s[n].call(i,this,t)}this.labelContainer=e(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||e(this.currentForm),this.containers=e(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var i,n=this.groups={};e.each(this.settings.groups,function(t,i){"string"==typeof i&&(i=i.split(/\s/)),e.each(i,function(e,i){n[i]=t})}),i=this.settings.rules,e.each(i,function(t,n){i[t]=e.validator.normalizeRule(n)}),e(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox']",t).on("click.validate","select, option, [type='radio'], [type='checkbox']",t),this.settings.invalidHandler&&e(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler),e(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required","true")},form:function(){return this.checkForm(),e.extend(this.submitted,this.errorMap),this.invalid=e.extend({},this.errorMap),this.valid()||e(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var e=0,t=this.currentElements=this.elements();t[e];e++)this.check(t[e]);return this.valid()},element:function(t){var i=this.clean(t),n=this.validationTargetFor(i),s=!0;return this.lastElement=n,void 0===n?delete this.invalid[i.name]:(this.prepareElement(n),this.currentElements=e(n),(s=!1!==this.check(n))?delete this.invalid[n.name]:this.invalid[n.name]=!0),e(t).attr("aria-invalid",!s),this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),s},showErrors:function(t){if(t){e.extend(this.errorMap,t),this.errorList=[];for(var i in t)this.errorList.push({message:t[i],element:this.findByName(i)[0]});this.successList=e.grep(this.successList,function(e){return!(e.name in t)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){e.fn.resetForm&&e(this.currentForm).resetForm(),this.submitted={},this.lastElement=null,this.prepareForm(),this.hideErrors();var t,i=this.elements().removeData("previousValue").removeAttr("aria-invalid");if(this.settings.unhighlight)for(t=0;i[t];t++)this.settings.unhighlight.call(this,i[t],this.settings.errorClass,"");else i.removeClass(this.settings.errorClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(e){var t,i=0;for(t in e)i++;return i},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(e){e.not(this.containers).text(""),this.addWrapper(e).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{e(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(e){}},findLastActive:function(){var t=this.lastActive;return t&&1===e.grep(this.errorList,function(e){return e.element.name===t.name}).length&&t},elements:function(){var t=this,i={};return e(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){return!this.name&&t.settings.debug&&window.console&&console.error("%o has no name assigned",this),!(this.name in i||!t.objectLength(e(this).rules()))&&(i[this.name]=!0,!0)})},clean:function(t){return e(t)[0]},errors:function(){var t=this.settings.errorClass.split(" ").join(".");return e(this.settings.errorElement+"."+t,this.errorContext)},reset:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=e([]),this.toHide=e([]),this.currentElements=e([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(e){this.reset(),this.toHide=this.errorsFor(e)},elementValue:function(t){var i,n=e(t),s=t.type;return"radio"===s||"checkbox"===s?this.findByName(t.name).filter(":checked").val():"number"===s&&void 0!==t.validity?!t.validity.badInput&&n.val():(i=n.val(),"string"==typeof i?i.replace(/\r/g,""):i)},check:function(t){t=this.validationTargetFor(this.clean(t));var i,n,s,a=e(t).rules(),r=e.map(a,function(e,t){return t}).length,o=!1,l=this.elementValue(t);for(n in a){s={method:n,parameters:a[n]};try{if("dependency-mismatch"===(i=e.validator.methods[n].call(this,l,t,s.parameters))&&1===r){o=!0;continue}if(o=!1,"pending"===i)return void(this.toHide=this.toHide.not(this.errorsFor(t)));if(!i)return this.formatAndAdd(t,s),!1}catch(e){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+t.id+", check the '"+s.method+"' method.",e),e instanceof TypeError&&(e.message+=".  Exception occurred when checking element "+t.id+", check the '"+s.method+"' method."),e}}if(!o)return this.objectLength(a)&&this.successList.push(t),!0},customDataMessage:function(t,i){return e(t).data("msg"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase())||e(t).data("msg")},customMessage:function(e,t){var i=this.settings.messages[e];return i&&(i.constructor===String?i:i[t])},findDefined:function(){for(var e=0;e<arguments.length;e++)if(void 0!==arguments[e])return arguments[e]},defaultMessage:function(t,i){return this.findDefined(this.customMessage(t.name,i),this.customDataMessage(t,i),!this.settings.ignoreTitle&&t.title||void 0,e.validator.messages[i],"<strong>Warning: No message defined for "+t.name+"</strong>")},formatAndAdd:function(t,i){var n=this.defaultMessage(t,i.method),s=/\$?\{(\d+)\}/g;"function"==typeof n?n=n.call(this,i.parameters,t):s.test(n)&&(n=e.validator.format(n.replace(s,"{$1}"),i.parameters)),this.errorList.push({message:n,element:t,method:i.method}),this.errorMap[t.name]=n,this.submitted[t.name]=n},addWrapper:function(e){return this.settings.wrapper&&(e=e.add(e.parent(this.settings.wrapper))),e},defaultShowErrors:function(){var e,t,i;for(e=0;this.errorList[e];e++)i=this.errorList[e],this.settings.highlight&&this.settings.highlight.call(this,i.element,this.settings.errorClass,this.settings.validClass),this.showLabel(i.element,i.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(e=0;this.successList[e];e++)this.showLabel(this.successList[e]);if(this.settings.unhighlight)for(e=0,t=this.validElements();t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return e(this.errorList).map(function(){return this.element})},showLabel:function(t,i){var n,s,a,r=this.errorsFor(t),o=this.idOrName(t),l=e(t).attr("aria-describedby");r.length?(r.removeClass(this.settings.validClass).addClass(this.settings.errorClass),r.html(i)):(n=r=e("<"+this.settings.errorElement+">").attr("id",o+"-error").addClass(this.settings.errorClass).html(i||""),this.settings.wrapper&&(n=r.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(n):this.settings.errorPlacement?this.settings.errorPlacement(n,e(t)):n.insertAfter(t),r.is("label")?r.attr("for",o):0===r.parents("label[for='"+o+"']").length&&(a=r.attr("id").replace(/(:|\.|\[|\]|\$)/g,"\\$1"),l?l.match(new RegExp("\\b"+a+"\\b"))||(l+=" "+a):l=a,e(t).attr("aria-describedby",l),(s=this.groups[t.name])&&e.each(this.groups,function(t,i){i===s&&e("[name='"+t+"']",this.currentForm).attr("aria-describedby",r.attr("id"))}))),!i&&this.settings.success&&(r.text(""),"string"==typeof this.settings.success?r.addClass(this.settings.success):this.settings.success(r,t)),this.toShow=this.toShow.add(r)},errorsFor:function(t){var i=this.idOrName(t),n=e(t).attr("aria-describedby"),s="label[for='"+i+"'], label[for='"+i+"'] *";return n&&(s=s+", #"+n.replace(/\s+/g,", #")),this.errors().filter(s)},idOrName:function(e){return this.groups[e.name]||(this.checkable(e)?e.name:e.id||e.name)},validationTargetFor:function(t){return this.checkable(t)&&(t=this.findByName(t.name)),e(t).not(this.settings.ignore)[0]},checkable:function(e){return/radio|checkbox/i.test(e.type)},findByName:function(t){return e(this.currentForm).find("[name='"+t+"']")},getLength:function(t,i){switch(i.nodeName.toLowerCase()){case"select":return e("option:selected",i).length;case"input":if(this.checkable(i))return this.findByName(i.name).filter(":checked").length}return t.length},depend:function(e,t){return!this.dependTypes[typeof e]||this.dependTypes[typeof e](e,t)},dependTypes:{boolean:function(e){return e},string:function(t,i){return!!e(t,i.form).length},function:function(e,t){return e(t)}},optional:function(t){var i=this.elementValue(t);return!e.validator.methods.required.call(this,i,t)&&"dependency-mismatch"},startRequest:function(e){this.pending[e.name]||(this.pendingRequest++,this.pending[e.name]=!0)},stopRequest:function(t,i){--this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[t.name],i&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(e(this.currentForm).submit(),this.formSubmitted=!1):!i&&0===this.pendingRequest&&this.formSubmitted&&(e(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(t){return e.data(t,"previousValue")||e.data(t,"previousValue",{old:null,valid:!0,message:this.defaultMessage(t,"remote")})},destroy:function(){this.resetForm(),e(this.currentForm).off(".validate").removeData("validator")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(t,i){t.constructor===String?this.classRuleSettings[t]=i:e.extend(this.classRuleSettings,t)},classRules:function(t){var i={},n=e(t).attr("class");return n&&e.each(n.split(" "),function(){this in e.validator.classRuleSettings&&e.extend(i,e.validator.classRuleSettings[this])}),i},normalizeAttributeRule:function(e,t,i,n){/min|max/.test(i)&&(null===t||/number|range|text/.test(t))&&(n=Number(n),isNaN(n)&&(n=void 0)),n||0===n?e[i]=n:t===i&&"range"!==t&&(e[i]=!0)},attributeRules:function(t){var i,n,s={},a=e(t),r=t.getAttribute("type");for(i in e.validator.methods)"required"===i?(""===(n=t.getAttribute(i))&&(n=!0),n=!!n):n=a.attr(i),this.normalizeAttributeRule(s,r,i,n);return s.maxlength&&/-1|2147483647|524288/.test(s.maxlength)&&delete s.maxlength,s},dataRules:function(t){var i,n,s={},a=e(t),r=t.getAttribute("type");for(i in e.validator.methods)n=a.data("rule"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase()),this.normalizeAttributeRule(s,r,i,n);return s},staticRules:function(t){var i={},n=e.data(t.form,"validator");return n.settings.rules&&(i=e.validator.normalizeRule(n.settings.rules[t.name])||{}),i},normalizeRules:function(t,i){return e.each(t,function(n,s){if(!1!==s){if(s.param||s.depends){var a=!0;switch(typeof s.depends){case"string":a=!!e(s.depends,i.form).length;break;case"function":a=s.depends.call(i,i)}a?t[n]=void 0===s.param||s.param:delete t[n]}}else delete t[n]}),e.each(t,function(n,s){t[n]=e.isFunction(s)?s(i):s}),e.each(["minlength","maxlength"],function(){t[this]&&(t[this]=Number(t[this]))}),e.each(["rangelength","range"],function(){var i;t[this]&&(e.isArray(t[this])?t[this]=[Number(t[this][0]),Number(t[this][1])]:"string"==typeof t[this]&&(i=t[this].replace(/[\[\]]/g,"").split(/[\s,]+/),t[this]=[Number(i[0]),Number(i[1])]))}),e.validator.autoCreateRanges&&(null!=t.min&&null!=t.max&&(t.range=[t.min,t.max],delete t.min,delete t.max),null!=t.minlength&&null!=t.maxlength&&(t.rangelength=[t.minlength,t.maxlength],delete t.minlength,delete t.maxlength)),t},normalizeRule:function(t){if("string"==typeof t){var i={};e.each(t.split(/\s/),function(){i[this]=!0}),t=i}return t},addMethod:function(t,i,n){e.validator.methods[t]=i,e.validator.messages[t]=void 0!==n?n:e.validator.messages[t],i.length<3&&e.validator.addClassRules(t,e.validator.normalizeRule(t))},methods:{required:function(t,i,n){if(!this.depend(n,i))return"dependency-mismatch";if("select"===i.nodeName.toLowerCase()){var s=e(i).val();return s&&s.length>0}return this.checkable(i)?this.getLength(t,i)>0:t.length>0},email:function(e,t){return this.optional(t)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)},url:function(e,t){return this.optional(t)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(e)},date:function(e,t){return this.optional(t)||!/Invalid|NaN/.test(new Date(e).toString())},dateISO:function(e,t){return this.optional(t)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(e)},number:function(e,t){return this.optional(t)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(e)},digits:function(e,t){return this.optional(t)||/^\d+$/.test(e)},creditcard:function(e,t){if(this.optional(t))return"dependency-mismatch";if(/[^0-9 \-]+/.test(e))return!1;var i,n,s=0,a=0,r=!1;if((e=e.replace(/\D/g,"")).length<13||e.length>19)return!1;for(i=e.length-1;i>=0;i--)n=e.charAt(i),a=parseInt(n,10),r&&(a*=2)>9&&(a-=9),s+=a,r=!r;return s%10==0},minlength:function(t,i,n){var s=e.isArray(t)?t.length:this.getLength(t,i);return this.optional(i)||s>=n},maxlength:function(t,i,n){var s=e.isArray(t)?t.length:this.getLength(t,i);return this.optional(i)||s<=n},rangelength:function(t,i,n){var s=e.isArray(t)?t.length:this.getLength(t,i);return this.optional(i)||s>=n[0]&&s<=n[1]},min:function(e,t,i){return this.optional(t)||e>=i},max:function(e,t,i){return this.optional(t)||e<=i},range:function(e,t,i){return this.optional(t)||e>=i[0]&&e<=i[1]},equalTo:function(t,i,n){var s=e(n);return this.settings.onfocusout&&s.off(".validate-equalTo").on("blur.validate-equalTo",function(){e(i).valid()}),t===s.val()},remote:function(t,i,n){if(this.optional(i))return"dependency-mismatch";var s,a,r=this.previousValue(i);return this.settings.messages[i.name]||(this.settings.messages[i.name]={}),r.originalMessage=this.settings.messages[i.name].remote,this.settings.messages[i.name].remote=r.message,n="string"==typeof n&&{url:n}||n,r.old===t?r.valid:(r.old=t,s=this,this.startRequest(i),a={},a[i.name]=t,e.ajax(e.extend(!0,{mode:"abort",port:"validate"+i.name,dataType:"json",data:a,context:s.currentForm,success:function(a){var o,l,c,h=!0===a||"true"===a||a==n.handler(a);s.settings.messages[i.name].remote=r.originalMessage,h?(c=s.formSubmitted,s.prepareElement(i),s.formSubmitted=c,s.successList.push(i),delete s.invalid[i.name],s.showErrors()):(o={},l=a||s.defaultMessage(i,"remote"),o[i.name]=r.message=e.isFunction(l)?l(t):l,s.invalid[i.name]=!0,s.showErrors(o)),r.valid=h,s.stopRequest(i,h)}},n)),"pending")}}});var t,i={};e.ajaxPrefilter?e.ajaxPrefilter(function(e,t,n){var s=e.port;"abort"===e.mode&&(i[s]&&i[s].abort(),i[s]=n)}):(t=e.ajax,e.ajax=function(n){var s=("mode"in n?n:e.ajaxSettings).mode,a=("port"in n?n:e.ajaxSettings).port;return"abort"===s?(i[a]&&i[a].abort(),i[a]=t.apply(this,arguments),i[a]):t.apply(this,arguments)})}),angular.module("toaster",["ngAnimate"]).service("toaster",["$rootScope",function(e){this.pop=function(t,i,n,s,a,r){this.toast={type:t,title:i,body:n,timeout:s,bodyOutputType:a,clickHandler:r},e.$broadcast("toaster-newToast")},this.clear=function(){e.$broadcast("toaster-clearToasts")}}]).constant("toasterConfig",{limit:0,"tap-to-dismiss":!0,"close-button":!1,"newest-on-top":!0,"time-out":2e3,"icon-classes":{error:"toast-error",info:"toast-info",wait:"toast-wait",success:"toast-success",warning:"toast-warning"},"body-output-type":"","body-template":"toasterBodyTmpl.html","icon-class":"toast-info","position-class":"toast-top-right","title-class":"toast-title","message-class":"toast-message"}).directive("toasterContainer",["$compile","$timeout","$sce","toasterConfig","toaster",function(e,t,i,n,s){return{replace:!0,restrict:"EA",scope:!0,link:function(e,a,r){function o(t){switch(t.type=c["icon-classes"][t.type],t.type||(t.type=c["icon-class"]),h++,angular.extend(t,{id:h}),t.bodyOutputType=t.bodyOutputType||c["body-output-type"],t.bodyOutputType){case"trustedHtml":t.html=i.trustAsHtml(t.body);break;case"template":t.bodyTemplate=t.body||c["body-template"]}e.configureTimer(t),!0===c["newest-on-top"]?(e.toasters.unshift(t),c.limit>0&&e.toasters.length>c.limit&&e.toasters.pop()):(e.toasters.push(t),c.limit>0&&e.toasters.length>c.limit&&e.toasters.shift())}function l(i,n){i.timeout=t(function(){e.removeToast(i.id)},n)}var c,h=0;c=angular.extend({},n,e.$eval(r.toasterOptions)),e.config={position:c["position-class"],title:c["title-class"],message:c["message-class"],tap:c["tap-to-dismiss"],closeButton:c["close-button"]},e.configureTimer=function(e){var t="number"==typeof e.timeout?e.timeout:c["time-out"];t>0&&l(e,t)},e.toasters=[],e.$on("toaster-newToast",function(){o(s.toast)}),e.$on("toaster-clearToasts",function(){e.toasters.splice(0,e.toasters.length)})},controller:["$scope","$element","$attrs",function(e,i,n){e.stopTimer=function(e){e.timeout&&(t.cancel(e.timeout),e.timeout=null)},e.restartTimer=function(t){t.timeout||e.configureTimer(t)},e.removeToast=function(t){var i=0;for(i;i<e.toasters.length&&e.toasters[i].id!==t;i++);e.toasters.splice(i,1)},e.click=function(t){!0===e.config.tap&&(t.clickHandler&&angular.isFunction(e.$parent.$eval(t.clickHandler))?!0===e.$parent.$eval(t.clickHandler)(t)&&e.removeToast(t.id):(angular.isString(t.clickHandler)&&console.log("TOAST-NOTE: Your click handler is not inside a parent scope of toaster-container."),e.removeToast(t.id)))}}],template:'<div  id="toast-container" ng-class="config.position"><div ng-repeat="toaster in toasters" class="toast" ng-class="toaster.type" ng-click="click(toaster)" ng-mouseover="stopTimer(toaster)"  ng-mouseout="restartTimer(toaster)"><button class="toast-close-button" ng-show="config.closeButton">&times;</button><div ng-class="config.title">{{toaster.title}}</div><div ng-class="config.message" ng-switch on="toaster.bodyOutputType"><div ng-switch-when="trustedHtml" ng-bind-html="toaster.html"></div><div ng-switch-when="template"><div ng-include="toaster.bodyTemplate"></div></div><div ng-switch-default >{{toaster.body}}</div></div></div></div>'}}]),function(){var e,t,i,n,s,a={}.hasOwnProperty,r=function(e,t){function i(){this.constructor=e}for(var n in t)a.call(t,n)&&(e[n]=t[n]);return i.prototype=t.prototype,e.prototype=new i,e.__super__=t.prototype,e};(n=function(){function e(){this.options_index=0,this.parsed=[]}return e.prototype.add_node=function(e){return"OPTGROUP"===e.nodeName.toUpperCase()?this.add_group(e):this.add_option(e)},e.prototype.add_group=function(e){var t,i,n,s,a,r;for(t=this.parsed.length,this.parsed.push({array_index:t,group:!0,label:this.escapeExpression(e.label),children:0,disabled:e.disabled}),r=[],n=0,s=(a=e.childNodes).length;s>n;n++)i=a[n],r.push(this.add_option(i,t,e.disabled));return r},e.prototype.add_option=function(e,t,i){return"OPTION"===e.nodeName.toUpperCase()?(""!==e.text?(null!=t&&(this.parsed[t].children+=1),this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,value:e.value,text:e.text,html:e.innerHTML,selected:e.selected,disabled:!0===i?i:e.disabled,group_array_index:t,classes:e.className,style:e.style.cssText})):this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,empty:!0}),this.options_index+=1):void 0},e.prototype.escapeExpression=function(e){var t,i;return null==e||!1===e?"":/[\&\<\>\"\'\`]/.test(e)?(t={"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},i=/&(?!\w+;)|[\<\>\"\'\`]/g,e.replace(i,function(e){return t[e]||"&amp;"})):e},e}()).select_to_array=function(e){var t,i,s,a,r;for(i=new n,s=0,a=(r=e.childNodes).length;a>s;s++)t=r[s],i.add_node(t);return i.parsed},t=function(){function e(t,i){this.form_field=t,this.options=null!=i?i:{},e.browser_is_supported()&&(this.is_multiple=this.form_field.multiple,this.set_default_text(),this.set_default_values(),this.setup(),this.set_up_html(),this.register_observers())}return e.prototype.set_default_values=function(){var e=this;return this.click_test_action=function(t){return e.test_active_click(t)},this.activate_action=function(t){return e.activate_field(t)},this.active_field=!1,this.mouse_on_container=!1,this.results_showing=!1,this.result_highlighted=null,this.allow_single_deselect=null!=this.options.allow_single_deselect&&null!=this.form_field.options[0]&&""===this.form_field.options[0].text&&this.options.allow_single_deselect,this.disable_search_threshold=this.options.disable_search_threshold||0,this.disable_search=this.options.disable_search||!1,this.enable_split_word_search=null==this.options.enable_split_word_search||this.options.enable_split_word_search,this.group_search=null==this.options.group_search||this.options.group_search,this.search_contains=this.options.search_contains||!1,this.single_backstroke_delete=null==this.options.single_backstroke_delete||this.options.single_backstroke_delete,this.max_selected_options=this.options.max_selected_options||1/0,this.inherit_select_classes=this.options.inherit_select_classes||!1,this.display_selected_options=null==this.options.display_selected_options||this.options.display_selected_options,this.display_disabled_options=null==this.options.display_disabled_options||this.options.display_disabled_options},e.prototype.set_default_text=function(){return this.default_text=this.form_field.getAttribute("data-placeholder")?this.form_field.getAttribute("data-placeholder"):this.is_multiple?this.options.placeholder_text_multiple||this.options.placeholder_text||e.default_multiple_text:this.options.placeholder_text_single||this.options.placeholder_text||e.default_single_text,this.results_none_found=this.form_field.getAttribute("data-no_results_text")||this.options.no_results_text||e.default_no_result_text},e.prototype.mouse_enter=function(){return this.mouse_on_container=!0},e.prototype.mouse_leave=function(){return this.mouse_on_container=!1},e.prototype.input_focus=function(){var e=this;if(this.is_multiple){if(!this.active_field)return setTimeout(function(){return e.container_mousedown()},50)}else if(!this.active_field)return this.activate_field()},e.prototype.input_blur=function(){var e=this;return this.mouse_on_container?void 0:(this.active_field=!1,setTimeout(function(){return e.blur_test()},100))},e.prototype.results_option_build=function(e){var t,i,n,s,a;for(t="",n=0,s=(a=this.results_data).length;s>n;n++)i=a[n],t+=i.group?this.result_add_group(i):this.result_add_option(i),(null!=e?e.first:void 0)&&(i.selected&&this.is_multiple?this.choice_build(i):i.selected&&!this.is_multiple&&this.single_set_selected_text(i.text));return t},e.prototype.result_add_option=function(e){var t,i;return e.search_match&&this.include_option_in_results(e)?(t=[],e.disabled||e.selected&&this.is_multiple||t.push("active-result"),!e.disabled||e.selected&&this.is_multiple||t.push("disabled-result"),e.selected&&t.push("result-selected"),null!=e.group_array_index&&t.push("group-option"),""!==e.classes&&t.push(e.classes),i=document.createElement("li"),i.className=t.join(" "),i.style.cssText=e.style,i.setAttribute("data-option-array-index",e.array_index),i.innerHTML=e.search_text,this.outerHTML(i)):""},e.prototype.result_add_group=function(e){var t;return(e.search_match||e.group_match)&&e.active_options>0?(t=document.createElement("li"),t.className="group-result",t.innerHTML=e.search_text,this.outerHTML(t)):""},e.prototype.results_update_field=function(){return this.set_default_text(),this.is_multiple||this.results_reset_cleanup(),this.result_clear_highlight(),this.results_build(),this.results_showing?this.winnow_results():void 0},e.prototype.reset_single_select_options=function(){var e,t,i,n,s;for(s=[],t=0,i=(n=this.results_data).length;i>t;t++)e=n[t],e.selected?s.push(e.selected=!1):s.push(void 0);return s},e.prototype.results_toggle=function(){return this.results_showing?this.results_hide():this.results_show()},e.prototype.results_search=function(){return this.results_showing?this.winnow_results():this.results_show()},e.prototype.winnow_results=function(){var e,t,i,n,s,a,r,o,l,c,h,u,d;for(this.no_results_clear(),s=0,e=(r=this.get_search_text()).replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),n=this.search_contains?"":"^",i=new RegExp(n+e,"i"),c=new RegExp(e,"i"),h=0,u=(d=this.results_data).length;u>h;h++)t=d[h],t.search_match=!1,a=null,this.include_option_in_results(t)&&(t.group&&(t.group_match=!1,t.active_options=0),null!=t.group_array_index&&this.results_data[t.group_array_index]&&(0===(a=this.results_data[t.group_array_index]).active_options&&a.search_match&&(s+=1),a.active_options+=1),(!t.group||this.group_search)&&(t.search_text=t.group?t.label:t.html,t.search_match=this.search_string_match(t.search_text,i),t.search_match&&!t.group&&(s+=1),t.search_match?(r.length&&(o=t.search_text.search(c),l=t.search_text.substr(0,o+r.length)+"</em>"+t.search_text.substr(o+r.length),t.search_text=l.substr(0,o)+"<em>"+l.substr(o)),null!=a&&(a.group_match=!0)):null!=t.group_array_index&&this.results_data[t.group_array_index].search_match&&(t.search_match=!0)));return this.result_clear_highlight(),1>s&&r.length?(this.update_results_content(""),this.no_results(r)):(this.update_results_content(this.results_option_build()),this.winnow_results_set_highlight())},e.prototype.search_string_match=function(e,t){var i,n,s,a;if(t.test(e))return!0;if(this.enable_split_word_search&&(e.indexOf(" ")>=0||0===e.indexOf("["))&&(n=e.replace(/\[|\]/g,"").split(" ")).length)for(s=0,a=n.length;a>s;s++)if(i=n[s],t.test(i))return!0},e.prototype.choices_count=function(){var e,t,i;if(null!=this.selected_option_count)return this.selected_option_count;for(this.selected_option_count=0,e=0,t=(i=this.form_field.options).length;t>e;e++)i[e].selected&&(this.selected_option_count+=1);return this.selected_option_count},e.prototype.choices_click=function(e){return e.preventDefault(),this.results_showing||this.is_disabled?void 0:this.results_show()},e.prototype.keyup_checker=function(e){var t,i;switch(t=null!=(i=e.which)?i:e.keyCode,this.search_field_scale(),t){case 8:if(this.is_multiple&&this.backstroke_length<1&&this.choices_count()>0)return this.keydown_backstroke();if(!this.pending_backstroke)return this.result_clear_highlight(),this.results_search();break;case 13:if(e.preventDefault(),this.results_showing)return this.result_select(e);break;case 27:return this.results_showing&&this.results_hide(),!0;case 9:case 38:case 40:case 16:case 91:case 17:break;default:return this.results_search()}},e.prototype.clipboard_event_checker=function(){var e=this;return setTimeout(function(){return e.results_search()},50)},e.prototype.container_width=function(){return null!=this.options.width?this.options.width:this.form_field.offsetWidth+"px"},e.prototype.include_option_in_results=function(e){return!(this.is_multiple&&!this.display_selected_options&&e.selected)&&(!(!this.display_disabled_options&&e.disabled)&&!e.empty)},e.prototype.search_results_touchstart=function(e){return this.touch_started=!0,this.search_results_mouseover(e)},e.prototype.search_results_touchmove=function(e){return this.touch_started=!1,this.search_results_mouseout(e)},e.prototype.search_results_touchend=function(e){return this.touch_started?this.search_results_mouseup(e):void 0},e.prototype.outerHTML=function(e){var t;return e.outerHTML?e.outerHTML:((t=document.createElement("div")).appendChild(e),t.innerHTML)},e.browser_is_supported=function(){return"Microsoft Internet Explorer"===window.navigator.appName?document.documentMode>=8:!/iP(od|hone)/i.test(window.navigator.userAgent)&&(!/Android/i.test(window.navigator.userAgent)||!/Mobile/i.test(window.navigator.userAgent))},e.default_multiple_text="Select Some Options",e.default_single_text="Select an Option",e.default_no_result_text="No results match",e}(),(e=jQuery).fn.extend({chosen:function(n){return t.browser_is_supported()?this.each(function(){var t,s;s=(t=e(this)).data("chosen"),"destroy"===n&&s?s.destroy():s||t.data("chosen",new i(this,n))}):this}}),i=function(t){function i(){return s=i.__super__.constructor.apply(this,arguments)}return r(i,t),i.prototype.setup=function(){return this.form_field_jq=e(this.form_field),this.current_selectedIndex=this.form_field.selectedIndex,this.is_rtl=this.form_field_jq.hasClass("chosen-rtl")},i.prototype.set_up_html=function(){var t,i;return(t=["chosen-container"]).push("chosen-container-"+(this.is_multiple?"multi":"single")),this.inherit_select_classes&&this.form_field.className&&t.push(this.form_field.className),this.is_rtl&&t.push("chosen-rtl"),i={class:t.join(" "),style:"width: "+this.container_width()+";",title:this.form_field.title},this.form_field.id.length&&(i.id=this.form_field.id.replace(/[^\w]/g,"_")+"_chosen"),this.container=e("<div />",i),this.is_multiple?this.container.html('<ul class="chosen-choices"><li class="search-field"><input type="text" value="'+this.default_text+'" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>'):this.container.html('<a class="chosen-single chosen-default" tabindex="-1"><span>'+this.default_text+'</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>'),this.form_field_jq.hide().after(this.container),this.dropdown=this.container.find("div.chosen-drop").first(),this.search_field=this.container.find("input").first(),this.search_results=this.container.find("ul.chosen-results").first(),this.search_field_scale(),this.search_no_results=this.container.find("li.no-results").first(),this.is_multiple?(this.search_choices=this.container.find("ul.chosen-choices").first(),this.search_container=this.container.find("li.search-field").first()):(this.search_container=this.container.find("div.chosen-search").first(),this.selected_item=this.container.find(".chosen-single").first()),this.results_build(),this.set_tab_index(),this.set_label_behavior(),this.form_field_jq.trigger("chosen:ready",{chosen:this})},i.prototype.register_observers=function(){var e=this;return this.container.bind("mousedown.chosen",function(t){e.container_mousedown(t)}),this.container.bind("mouseup.chosen",function(t){e.container_mouseup(t)}),this.container.bind("mouseenter.chosen",function(t){e.mouse_enter(t)}),this.container.bind("mouseleave.chosen",function(t){e.mouse_leave(t)}),this.search_results.bind("mouseup.chosen",function(t){e.search_results_mouseup(t)}),this.search_results.bind("mouseover.chosen",function(t){e.search_results_mouseover(t)}),this.search_results.bind("mouseout.chosen",function(t){e.search_results_mouseout(t)}),this.search_results.bind("mousewheel.chosen DOMMouseScroll.chosen",function(t){e.search_results_mousewheel(t)}),this.search_results.bind("touchstart.chosen",function(t){e.search_results_touchstart(t)}),this.search_results.bind("touchmove.chosen",function(t){e.search_results_touchmove(t)}),this.search_results.bind("touchend.chosen",function(t){e.search_results_touchend(t)}),this.form_field_jq.bind("chosen:updated.chosen",function(t){e.results_update_field(t)}),this.form_field_jq.bind("chosen:activate.chosen",function(t){e.activate_field(t)}),this.form_field_jq.bind("chosen:open.chosen",function(t){e.container_mousedown(t)}),this.form_field_jq.bind("chosen:close.chosen",function(t){e.input_blur(t)}),this.search_field.bind("blur.chosen",function(t){e.input_blur(t)}),this.search_field.bind("keyup.chosen",function(t){e.keyup_checker(t)}),this.search_field.bind("keydown.chosen",function(t){e.keydown_checker(t)}),this.search_field.bind("focus.chosen",function(t){e.input_focus(t)}),this.search_field.bind("cut.chosen",function(t){e.clipboard_event_checker(t)}),this.search_field.bind("paste.chosen",function(t){e.clipboard_event_checker(t)}),this.is_multiple?this.search_choices.bind("click.chosen",function(t){e.choices_click(t)}):this.container.bind("click.chosen",function(e){e.preventDefault()})},i.prototype.destroy=function(){return e(this.container[0].ownerDocument).unbind("click.chosen",this.click_test_action),this.search_field[0].tabIndex&&(this.form_field_jq[0].tabIndex=this.search_field[0].tabIndex),this.container.remove(),this.form_field_jq.removeData("chosen"),this.form_field_jq.show()},i.prototype.search_field_disabled=function(){return this.is_disabled=this.form_field_jq[0].disabled,this.is_disabled?(this.container.addClass("chosen-disabled"),this.search_field[0].disabled=!0,this.is_multiple||this.selected_item.unbind("focus.chosen",this.activate_action),this.close_field()):(this.container.removeClass("chosen-disabled"),this.search_field[0].disabled=!1,this.is_multiple?void 0:this.selected_item.bind("focus.chosen",this.activate_action))},i.prototype.container_mousedown=function(t){return this.is_disabled||(t&&"mousedown"===t.type&&!this.results_showing&&t.preventDefault(),null!=t&&e(t.target).hasClass("search-choice-close"))?void 0:(this.active_field?this.is_multiple||!t||e(t.target)[0]!==this.selected_item[0]&&!e(t.target).parents("a.chosen-single").length||(t.preventDefault(),this.results_toggle()):(this.is_multiple&&this.search_field.val(""),e(this.container[0].ownerDocument).bind("click.chosen",this.click_test_action),this.results_show()),this.activate_field())},i.prototype.container_mouseup=function(e){return"ABBR"!==e.target.nodeName||this.is_disabled?void 0:this.results_reset(e)},i.prototype.search_results_mousewheel=function(e){var t;return e.originalEvent&&(t=-e.originalEvent.wheelDelta||e.originalEvent.detail),null!=t?(e.preventDefault(),"DOMMouseScroll"===e.type&&(t*=40),this.search_results.scrollTop(t+this.search_results.scrollTop())):void 0},i.prototype.blur_test=function(){return!this.active_field&&this.container.hasClass("chosen-container-active")?this.close_field():void 0},i.prototype.close_field=function(){return e(this.container[0].ownerDocument).unbind("click.chosen",this.click_test_action),this.active_field=!1,this.results_hide(),this.container.removeClass("chosen-container-active"),this.clear_backstroke(),this.show_search_field_default(),this.search_field_scale()},i.prototype.activate_field=function(){return this.container.addClass("chosen-container-active"),this.active_field=!0,this.search_field.val(this.search_field.val()),this.search_field.focus()},i.prototype.test_active_click=function(t){var i;return i=e(t.target).closest(".chosen-container"),i.length&&this.container[0]===i[0]?this.active_field=!0:this.close_field()},i.prototype.results_build=function(){return this.parsing=!0,this.selected_option_count=null,this.results_data=n.select_to_array(this.form_field),this.is_multiple?this.search_choices.find("li.search-choice").remove():this.is_multiple||(this.single_set_selected_text(),this.disable_search||this.form_field.options.length<=this.disable_search_threshold?(this.search_field[0].readOnly=!0,this.container.addClass("chosen-container-single-nosearch")):(this.search_field[0].readOnly=!1,this.container.removeClass("chosen-container-single-nosearch"))),this.update_results_content(this.results_option_build({first:!0})),this.search_field_disabled(),this.show_search_field_default(),this.search_field_scale(),this.parsing=!1},i.prototype.result_do_highlight=function(e){var t,i,n,s,a;if(e.length){if(this.result_clear_highlight(),this.result_highlight=e,this.result_highlight.addClass("highlighted"),n=parseInt(this.search_results.css("maxHeight"),10),a=this.search_results.scrollTop(),s=n+a,i=this.result_highlight.position().top+this.search_results.scrollTop(),(t=i+this.result_highlight.outerHeight())>=s)return this.search_results.scrollTop(t-n>0?t-n:0);if(a>i)return this.search_results.scrollTop(i)}},i.prototype.result_clear_highlight=function(){return this.result_highlight&&this.result_highlight.removeClass("highlighted"),this.result_highlight=null},i.prototype.results_show=function(){return this.is_multiple&&this.max_selected_options<=this.choices_count()?(this.form_field_jq.trigger("chosen:maxselected",{chosen:this}),!1):(this.container.addClass("chosen-with-drop"),this.results_showing=!0,this.search_field.focus(),this.search_field.val(this.search_field.val()),this.winnow_results(),this.form_field_jq.trigger("chosen:showing_dropdown",{chosen:this}))},i.prototype.update_results_content=function(e){return this.search_results.html(e)},i.prototype.results_hide=function(){return this.results_showing&&(this.result_clear_highlight(),this.container.removeClass("chosen-with-drop"),this.form_field_jq.trigger("chosen:hiding_dropdown",{chosen:this})),this.results_showing=!1},i.prototype.set_tab_index=function(){var e;return this.form_field.tabIndex?(e=this.form_field.tabIndex,this.form_field.tabIndex=-1,this.search_field[0].tabIndex=e):void 0},i.prototype.set_label_behavior=function(){var t=this;return this.form_field_label=this.form_field_jq.parents("label"),!this.form_field_label.length&&this.form_field.id.length&&(this.form_field_label=e("label[for='"+this.form_field.id+"']")),this.form_field_label.length>0?this.form_field_label.bind("click.chosen",function(e){return t.is_multiple?t.container_mousedown(e):t.activate_field()}):void 0},i.prototype.show_search_field_default=function(){return this.is_multiple&&this.choices_count()<1&&!this.active_field?(this.search_field.val(this.default_text),this.search_field.addClass("default")):(this.search_field.val(""),this.search_field.removeClass("default"))},i.prototype.search_results_mouseup=function(t){var i;return i=e(t.target).hasClass("active-result")?e(t.target):e(t.target).parents(".active-result").first(),i.length?(this.result_highlight=i,this.result_select(t),this.search_field.focus()):void 0},i.prototype.search_results_mouseover=function(t){var i;return i=e(t.target).hasClass("active-result")?e(t.target):e(t.target).parents(".active-result").first(),i?this.result_do_highlight(i):void 0},i.prototype.search_results_mouseout=function(t){return e(t.target).hasClass("active-result")?this.result_clear_highlight():void 0},i.prototype.choice_build=function(t){var i,n,s=this;return i=e("<li />",{class:"search-choice"}).html("<span>"+t.html+"</span>"),t.disabled?i.addClass("search-choice-disabled"):((n=e("<a />",{class:"search-choice-close","data-option-array-index":t.array_index})).bind("click.chosen",function(e){return s.choice_destroy_link_click(e)}),i.append(n)),this.search_container.before(i)},i.prototype.choice_destroy_link_click=function(t){return t.preventDefault(),t.stopPropagation(),this.is_disabled?void 0:this.choice_destroy(e(t.target))},i.prototype.choice_destroy=function(e){return this.result_deselect(e[0].getAttribute("data-option-array-index"))?(this.show_search_field_default(),this.is_multiple&&this.choices_count()>0&&this.search_field.val().length<1&&this.results_hide(),e.parents("li").first().remove(),this.search_field_scale()):void 0},i.prototype.results_reset=function(){return this.reset_single_select_options(),this.form_field.options[0].selected=!0,this.single_set_selected_text(),this.show_search_field_default(),this.results_reset_cleanup(),this.form_field_jq.trigger("change"),this.active_field?this.results_hide():void 0},i.prototype.results_reset_cleanup=function(){return this.current_selectedIndex=this.form_field.selectedIndex,this.selected_item.find("abbr").remove()},i.prototype.result_select=function(e){var t,i;return this.result_highlight?(t=this.result_highlight,this.result_clear_highlight(),this.is_multiple&&this.max_selected_options<=this.choices_count()?(this.form_field_jq.trigger("chosen:maxselected",{chosen:this}),!1):(this.is_multiple?t.removeClass("active-result"):this.reset_single_select_options(),i=this.results_data[t[0].getAttribute("data-option-array-index")],i.selected=!0,this.form_field.options[i.options_index].selected=!0,this.selected_option_count=null,this.is_multiple?this.choice_build(i):this.single_set_selected_text(i.text),(e.metaKey||e.ctrlKey)&&this.is_multiple||this.results_hide(),this.search_field.val(""),(this.is_multiple||this.form_field.selectedIndex!==this.current_selectedIndex)&&this.form_field_jq.trigger("change",{selected:this.form_field.options[i.options_index].value}),this.current_selectedIndex=this.form_field.selectedIndex,this.search_field_scale())):void 0},i.prototype.single_set_selected_text=function(e){return null==e&&(e=this.default_text),e===this.default_text?this.selected_item.addClass("chosen-default"):(this.single_deselect_control_build(),this.selected_item.removeClass("chosen-default")),this.selected_item.find("span").text(e)},i.prototype.result_deselect=function(e){var t;return t=this.results_data[e],!this.form_field.options[t.options_index].disabled&&(t.selected=!1,this.form_field.options[t.options_index].selected=!1,this.selected_option_count=null,this.result_clear_highlight(),this.results_showing&&this.winnow_results(),this.form_field_jq.trigger("change",{deselected:this.form_field.options[t.options_index].value}),this.search_field_scale(),!0)},i.prototype.single_deselect_control_build=function(){return this.allow_single_deselect?(this.selected_item.find("abbr").length||this.selected_item.find("span").first().after('<abbr class="search-choice-close"></abbr>'),this.selected_item.addClass("chosen-single-with-deselect")):void 0},i.prototype.get_search_text=function(){return this.search_field.val()===this.default_text?"":e("<div/>").text(e.trim(this.search_field.val())).html()},i.prototype.winnow_results_set_highlight=function(){var e,t;return t=this.is_multiple?[]:this.search_results.find(".result-selected.active-result"),e=t.length?t.first():this.search_results.find(".active-result").first(),null!=e?this.result_do_highlight(e):void 0},i.prototype.no_results=function(t){var i;return(i=e('<li class="no-results">'+this.results_none_found+' "<span></span>"</li>')).find("span").first().html(t),this.search_results.append(i),this.form_field_jq.trigger("chosen:no_results",{chosen:this})},i.prototype.no_results_clear=function(){return this.search_results.find(".no-results").remove()},i.prototype.keydown_arrow=function(){var e;return this.results_showing&&this.result_highlight?(e=this.result_highlight.nextAll("li.active-result").first())?this.result_do_highlight(e):void 0:this.results_show()},i.prototype.keyup_arrow=function(){var e;return this.results_showing||this.is_multiple?this.result_highlight?(e=this.result_highlight.prevAll("li.active-result"),e.length?this.result_do_highlight(e.first()):(this.choices_count()>0&&this.results_hide(),this.result_clear_highlight())):void 0:this.results_show()},i.prototype.keydown_backstroke=function(){var e;return this.pending_backstroke?(this.choice_destroy(this.pending_backstroke.find("a").first()),this.clear_backstroke()):(e=this.search_container.siblings("li.search-choice").last(),e.length&&!e.hasClass("search-choice-disabled")?(this.pending_backstroke=e,this.single_backstroke_delete?this.keydown_backstroke():this.pending_backstroke.addClass("search-choice-focus")):void 0)},i.prototype.clear_backstroke=function(){return this.pending_backstroke&&this.pending_backstroke.removeClass("search-choice-focus"),this.pending_backstroke=null},i.prototype.keydown_checker=function(e){var t,i;switch(t=null!=(i=e.which)?i:e.keyCode,this.search_field_scale(),8!==t&&this.pending_backstroke&&this.clear_backstroke(),t){case 8:this.backstroke_length=this.search_field.val().length;break;case 9:this.results_showing&&!this.is_multiple&&this.result_select(e),this.mouse_on_container=!1;break;case 13:e.preventDefault();break;case 38:e.preventDefault(),this.keyup_arrow();break;case 40:e.preventDefault(),this.keydown_arrow()}},i.prototype.search_field_scale=function(){var t,i,n,s,a,r,o,l;if(this.is_multiple){for(0,r=0,s="position:absolute; left: -1000px; top: -1000px; display:none;",o=0,l=(a=["font-size","font-style","font-weight","font-family","line-height","text-transform","letter-spacing"]).length;l>o;o++)n=a[o],s+=n+":"+this.search_field.css(n)+";";return(t=e("<div />",{style:s})).text(this.search_field.val()),e("body").append(t),r=t.width()+25,t.remove(),i=this.container.outerWidth(),r>i-10&&(r=i-10),this.search_field.css({width:r+"px"})}},i}(t)}.call(this),function(){var e=[].indexOf||function(e){for(var t=0,i=this.length;t<i;t++)if(t in this&&this[t]===e)return t;return-1};angular.module("localytics.directives",[]),angular.module("localytics.directives").directive("chosen",["$timeout",function(t){var i,n,s,a;return n=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,i=["persistentCreateOption","createOptionText","createOption","skipNoResults","noResultsText","allowSingleDeselect","disableSearchThreshold","disableSearch","enableSplitWordSearch","inheritSelectClasses","maxSelectedOptions","placeholderTextMultiple","placeholderTextSingle","searchContains","singleBackstrokeDelete","displayDisabledOptions","displaySelectedOptions","width","includeGroupLabelInSelected","maxShownResults"],a=function(e){return e.replace(/[A-Z]/g,function(e){return"_"+e.toLowerCase()})},s=function(e){var t;if(angular.isArray(e))return 0===e.length;if(angular.isObject(e))for(t in e)if(e.hasOwnProperty(t))return!1;return!0},{restrict:"A",require:"?ngModel",priority:1,link:function(r,o,l,c){var h,u,d,p,f,m,g,v,b,_,y;if(r.disabledValuesHistory=r.disabledValuesHistory?r.disabledValuesHistory:[],(o=$(o)).addClass("localytics-chosen"),f=r.$eval(l.chosen)||{},angular.forEach(l,function(t,n){if(e.call(i,n)>=0)return l.$observe(n,function(e){var t;return t=String(o.attr(l.$attr[n])).slice(0,2),f[a(n)]="{{"===t?e:r.$eval(e),b()})}),g=function(){return o.addClass("loading").attr("disabled",!0).trigger("chosen:updated")},v=function(){return o.removeClass("loading"),angular.isDefined(l.disabled)?o.attr("disabled",l.disabled):o.attr("disabled",!1),o.trigger("chosen:updated")},h=null,u=!1,d=function(){var e;if(h){if((e=$(o.parent()).find("div.chosen-drop"))&&e.length>0&&parseInt(e.css("left"))>=0)return;return o.trigger("chosen:updated")}if(r.$evalAsync(function(){h=o.chosen(f).data("chosen")}),angular.isObject(h))return h.default_text},b=function(){return h&&u?o.attr("data-placeholder",h.results_none_found).attr("disabled",!0):o.removeAttr("data-placeholder"),o.trigger("chosen:updated")},c?(m=c.$render,c.$render=function(){return m(),d()},l.multiple&&(y=function(){return c.$viewValue},r.$watch(y,c.$render,!0))):d(),l.$observe("disabled",function(){return o.trigger("chosen:updated")}),l.ngOptions&&c)return p=l.ngOptions.match(n),_=p[7],r.$watchCollection(_,function(e,i){return t(function(){return angular.isUndefined(e)?g():(u=s(e),v(),b())})}),r.$on("$destroy",function(e){if("undefined"!=typeof timer&&null!==timer)return t.cancel(timer)})}}}])}.call(this),function(e,t,i){"use strict";function n(e){"ngInject";return e.any=function(i){var n=e.defer(),s=0,a=t.isArray(i)?[]:{};return t.forEach(i,function(t,i){s++,e.when(t).then(function(e){n.resolve(e)}).catch(function(e){a[i]=e,--s||n.reject(e)})}),0===s&&n.reject(a),n.promise},e}function s(e,i,n){"ngInject";function s(e,t){r(e,t),this.permissionName=e,this.validationFunction=o(t)}function a(t,i){return t?e.resolve(i):e.reject(i)}function r(e,i){if(!t.isString(e))throw new TypeError('Parameter "permissionName" name must be String');if(!t.isFunction(i)&&!t.isArray(i))throw new TypeError('Parameter "validationFunction" must be Function or an injectable Function using explicit annotation')}function o(e){return t.isArray(e.$inject||e)||(e=["permissionName","transitionProperties",e]),e}return s.prototype.validatePermission=function(){var e={permissionName:this.permissionName,transitionProperties:n},s=i.invoke(this.validationFunction,null,e);return t.isFunction(s.then)||(s=a(s,this.permissionName)),s},s}function a(e,i,n,s){"ngInject";function a(e,t){o(e,t),this.roleName=e,this.validationFunction=l(t)}function r(t,i){return t?e.resolve(i):e.reject(i)}function o(e,i){if(!t.isString(e))throw new TypeError('Parameter "roleName" name must be String');if(!t.isArray(i)&&!t.isFunction(i))throw new TypeError('Parameter "validationFunction" must be array or function')}function l(e){return t.isArray(e)&&!t.isFunction(e[e.length-1])?e=c(e):t.isArray(e.$inject||e)||(e=["roleName","transitionProperties",e]),e}function c(t){return function(){var i=t.map(function(t){return n.hasPermissionDefinition(t)?n.getPermissionDefinition(t).validatePermission():e.reject(t)});return e.all(i)}}return a.prototype.validateRole=function(){var e={roleName:this.roleName,transitionProperties:s},n=i.invoke(this.validationFunction,null,e);return t.isFunction(n.then)||(n=r(n,this.roleName)),n},a}function r(e){"ngInject";function i(t,i){n[t]=new e(t,i)}var n={};this.definePermission=i,this.defineManyPermissions=function(e,n){if(!t.isArray(e))throw new TypeError('Parameter "permissionNames" name must be Array');t.forEach(e,function(e){i(e,n)})},this.removePermissionDefinition=function(e){delete n[e]},this.hasPermissionDefinition=function(e){return t.isDefined(n[e])},this.getPermissionDefinition=function(e){return n[e]},this.getStore=function(){return n},this.clearStore=function(){n={}}}function o(e){"ngInject";function i(t,i){n[t]=new e(t,i)}var n={};this.defineRole=i,this.defineManyRoles=function(e){if(!t.isObject(e))throw new TypeError('Parameter "roleNames" name must be object');t.forEach(e,function(e,t){i(t,e)})},this.getRoleDefinition=function(e){return n[e]},this.hasRoleDefinition=function(e){return t.isDefined(n[e])},this.removeRoleDefinition=function(e){delete n[e]},this.getStore=function(){return n},this.clearStore=function(){n={}}}function l(e,i,n,s){"ngInject";return{restrict:"A",bindToController:{sref:"=?permissionSref",only:"=?permissionOnly",except:"=?permissionExcept",onAuthorized:"&?permissionOnAuthorized",onUnauthorized:"&?permissionOnUnauthorized"},controllerAs:"permission",controller:["$scope","$element",function(a,r){function o(){return i.has("$state")&&h.sref}function l(){t.isFunction(h.onAuthorized)?h.onAuthorized()(r):s.showElement(r)}function c(){t.isFunction(h.onUnauthorized)?h.onUnauthorized()(r):s.hideElement(r)}var h=this;a.$watchGroup(["permission.only","permission.except","sref"],function(){try{if(o())i.get("PermStateAuthorization").authorizeByStateName(h.sref).then(function(){l()}).catch(function(){c()});else{var t=i.get("PermAuthorization"),s=new n({only:h.only,except:h.except});t.authorizeByPermissionMap(s).then(function(){l()}).catch(function(){c()})}}catch(t){c(),e.error(t.message)}})}]}}function c(e){"ngInject";function t(t,n){var s=n.resolvePropertyValidity(n.except);e.any(s).then(function(e){t.reject(e)}).catch(function(){i(t,n)})}function i(t,i){if(i.only.length){var n=i.resolvePropertyValidity(i.only);e.any(n).then(function(e){t.resolve(e)}).catch(function(e){t.reject(e)})}else t.resolve()}this.authorizeByPermissionMap=function(i){var n=e.defer();return t(n,i),n.promise}}function h(e,i,n,s,a,r){"ngInject";function o(e){e=e||{},this.only=c(e.only),this.except=c(e.except),this.redirectTo=h(e.redirectTo)}function l(i,a){return e.when(n.invoke(i,null,{rejectedPermission:a,transitionProperties:s})).then(function(i){return t.isString(i)?{state:i}:t.isObject(i)?i:e.reject()})}function c(e){return t.isString(e)?[e]:t.isArray(e)?e:t.isFunction(e)?e.call(null,s):[]}function h(e){if(t.isDefined(e)){if(m(e)||t.isFunction(e))return g(e);if(t.isObject(e))return d(e)?p(e):f(e);if(t.isString(e))return u(e);throw new ReferenceError('Property "redirectTo" must be String, Function, Array or Object')}}function u(e){var t={};return t.default=function(){return{state:e}},t.default.$inject=["rejectedPermission","transitionProperties"],t}function d(e){return t.isDefined(e.state)}function p(e){var t={};return t.default=function(){return e},t}function f(e){var i={};return t.forEach(e,function(e,n){m(e)?i[n]=e:t.isFunction(e)&&(i[n]=e,i[n].$inject=[]),t.isObject(e)&&(i[n]=function(){return e},i[n].$inject=[]),t.isString(e)&&(i[n]=function(){return{state:e}},i[n].$inject=[])}),i}function m(e){return t.isArray(e)||t.isFunction(e)&&t.isArray(e.$inject)}function g(e){var i={};return i.default=e,t.isDefined(e.$inject)||(i.default.$inject=["rejectedPermission","transitionProperties"]),i}return o.prototype.resolveRedirectState=function(i){return t.isDefined(this.redirectTo)?l(this.redirectTo[i]||this.redirectTo.default,i):e.reject()},o.prototype.resolvePropertyValidity=function(t){return t.map(function(t){return a.hasRoleDefinition(t)?a.getRoleDefinition(t).validateRole():r.hasPermissionDefinition(t)?r.getPermissionDefinition(t).validatePermission():(i.warn("Permission or role "+t+" was not defined."),e.reject(t))})},o}n.$inject=["$delegate"],s.$inject=["$q","$injector","PermTransitionProperties"],a.$inject=["$q","$injector","PermPermissionStore","PermTransitionProperties"],r.$inject=["PermPermission"],o.$inject=["PermRole"],l.$inject=["$log","$injector","PermPermissionMap","PermPermissionStrategies"],c.$inject=["$q"],h.$inject=["$q","$log","$injector","PermTransitionProperties","PermRoleStore","PermPermissionStore"];var u=t.module("permission",[]);"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports=u.name),t.module("permission").decorator("$q",n);var d={enableElement:function(e){e.removeAttr("disabled")},disableElement:function(e){e.attr("disabled","disabled")},showElement:function(e){e.removeClass("ng-hide")},hideElement:function(e){e.addClass("ng-hide")}};t.module("permission").value("PermPermissionStrategies",d).value("PermissionStrategies",d);var p={};t.module("permission").value("PermTransitionProperties",p),t.module("permission").service("PermTransitionEvents",function(){"ngInject";this.broadcastPermissionStartEvent=function(){throw new Error("Method broadcastPermissionStartEvent in PermTransitionEvents interface must be implemented")},this.broadcastPermissionAcceptedEvent=function(){throw new Error("Method broadcastPermissionAcceptedEvent in PermTransitionEvents interface must be implemented")},this.broadcastPermissionDeniedEvent=function(){throw new Error("Method broadcastPermissionDeniedEvent in PermTransitionEvents interface must be implemented")}}),t.module("permission").factory("PermPermission",s),t.module("permission").factory("PermRole",a),t.module("permission").service("PermPermissionStore",r),t.module("permission").service("PermRoleStore",o),t.module("permission").directive("permission",l),t.module("permission").service("PermAuthorization",c),t.module("permission").factory("PermPermissionMap",h)}(window,window.angular),function(e){function t(){return new Date(Date.UTC.apply(Date,arguments))}var i=function(t,i){var a=this;this.element=e(t),this.language=i.language||this.element.data("date-language")||"en",this.language=this.language in n?this.language:"en",this.isRTL=n[this.language].rtl||!1,this.formatType=i.formatType||this.element.data("format-type")||"standard",this.format=s.parseFormat(i.format||this.element.data("date-format")||n[this.language].format||s.getDefaultFormat(this.formatType,"input"),this.formatType),this.isInline=!1,this.isVisible=!1,this.isInput=this.element.is("input"),this.bootcssVer=this.isInput?this.element.is(".form-control")?3:2:this.bootcssVer=this.element.is(".input-group")?3:2,this.component=!!this.element.is(".date")&&(3==this.bootcssVer?this.element.find(".input-group-addon .glyphicon-th, .input-group-addon .glyphicon-time, .input-group-addon .glyphicon-calendar").parent():this.element.find(".add-on .icon-th, .add-on .icon-time, .add-on .icon-calendar").parent()),this.componentReset=!!this.element.is(".date")&&(3==this.bootcssVer?this.element.find(".input-group-addon .glyphicon-remove").parent():this.element.find(".add-on .icon-remove").parent()),this.hasInput=this.component&&this.element.find("input").length,this.component&&0===this.component.length&&(this.component=!1),this.linkField=i.linkField||this.element.data("link-field")||!1,this.linkFormat=s.parseFormat(i.linkFormat||this.element.data("link-format")||s.getDefaultFormat(this.formatType,"link"),this.formatType),this.minuteStep=i.minuteStep||this.element.data("minute-step")||5,this.pickerPosition=i.pickerPosition||this.element.data("picker-position")||"bottom-right",this.showMeridian=i.showMeridian||this.element.data("show-meridian")||!1,this.initialDate=i.initialDate||new Date,this._attachEvents(),this.formatViewType="datetime","formatViewType"in i?this.formatViewType=i.formatViewType:"formatViewType"in this.element.data()&&(this.formatViewType=this.element.data("formatViewType")),this.minView=0,"minView"in i?this.minView=i.minView:"minView"in this.element.data()&&(this.minView=this.element.data("min-view")),this.minView=s.convertViewMode(this.minView),this.maxView=s.modes.length-1,"maxView"in i?this.maxView=i.maxView:"maxView"in this.element.data()&&(this.maxView=this.element.data("max-view")),this.maxView=s.convertViewMode(this.maxView),this.wheelViewModeNavigation=!1,"wheelViewModeNavigation"in i?this.wheelViewModeNavigation=i.wheelViewModeNavigation:"wheelViewModeNavigation"in this.element.data()&&(this.wheelViewModeNavigation=this.element.data("view-mode-wheel-navigation")),this.wheelViewModeNavigationInverseDirection=!1,"wheelViewModeNavigationInverseDirection"in i?this.wheelViewModeNavigationInverseDirection=i.wheelViewModeNavigationInverseDirection:"wheelViewModeNavigationInverseDirection"in this.element.data()&&(this.wheelViewModeNavigationInverseDirection=this.element.data("view-mode-wheel-navigation-inverse-dir")),this.wheelViewModeNavigationDelay=100,"wheelViewModeNavigationDelay"in i?this.wheelViewModeNavigationDelay=i.wheelViewModeNavigationDelay:"wheelViewModeNavigationDelay"in this.element.data()&&(this.wheelViewModeNavigationDelay=this.element.data("view-mode-wheel-navigation-delay")),this.startViewMode=2,"startView"in i?this.startViewMode=i.startView:"startView"in this.element.data()&&(this.startViewMode=this.element.data("start-view")),this.startViewMode=s.convertViewMode(this.startViewMode),this.viewMode=this.startViewMode,this.viewSelect=this.minView,"viewSelect"in i?this.viewSelect=i.viewSelect:"viewSelect"in this.element.data()&&(this.viewSelect=this.element.data("view-select")),this.viewSelect=s.convertViewMode(this.viewSelect),this.forceParse=!0,"forceParse"in i?this.forceParse=i.forceParse:"dateForceParse"in this.element.data()&&(this.forceParse=this.element.data("date-force-parse")),this.picker=e(3==this.bootcssVer?s.templateV3:s.template).appendTo(this.isInline?this.element:"body").on({click:e.proxy(this.click,this),mousedown:e.proxy(this.mousedown,this)}),this.wheelViewModeNavigation&&(e.fn.mousewheel?this.picker.on({mousewheel:e.proxy(this.mousewheel,this)}):console.log("Mouse Wheel event is not supported. Please include the jQuery Mouse Wheel plugin before enabling this option")),this.isInline?this.picker.addClass("datetimepicker-inline"):this.picker.addClass("datetimepicker-dropdown-"+this.pickerPosition+" dropdown-menu"),this.isRTL&&(this.picker.addClass("datetimepicker-rtl"),3==this.bootcssVer?this.picker.find(".prev span, .next span").toggleClass("glyphicon-arrow-left glyphicon-arrow-right"):this.picker.find(".prev i, .next i").toggleClass("icon-arrow-left icon-arrow-right")),e(document).on("mousedown",function(t){0===e(t.target).closest(".datetimepicker").length&&a.hide()}),this.autoclose=!1,"autoclose"in i?this.autoclose=i.autoclose:"dateAutoclose"in this.element.data()&&(this.autoclose=this.element.data("date-autoclose")),this.keyboardNavigation=!0,"keyboardNavigation"in i?this.keyboardNavigation=i.keyboardNavigation:"dateKeyboardNavigation"in this.element.data()&&(this.keyboardNavigation=this.element.data("date-keyboard-navigation")),this.todayBtn=i.todayBtn||this.element.data("date-today-btn")||!1,this.todayHighlight=i.todayHighlight||this.element.data("date-today-highlight")||!1,this.weekStart=(i.weekStart||this.element.data("date-weekstart")||n[this.language].weekStart||0)%7,this.weekEnd=(this.weekStart+6)%7,this.startDate=-1/0,this.endDate=1/0,this.daysOfWeekDisabled=[],this.setStartDate(i.startDate||this.element.data("date-startdate")),this.setEndDate(i.endDate||this.element.data("date-enddate")),this.setDaysOfWeekDisabled(i.daysOfWeekDisabled||this.element.data("date-days-of-week-disabled")),this.fillDow(),this.fillMonths(),this.update(),this.showMode(),this.isInline&&this.show(),this.picker.find("tfoot th.date-clear").on({click:e.proxy(this.reset,this)})};i.prototype={constructor:i,_events:[],_attachEvents:function(){this._detachEvents(),this.isInput?this._events=[[this.element,{focus:e.proxy(this.show,this),keyup:e.proxy(this.update,this),keydown:e.proxy(this.keydown,this)}]]:this.component&&this.hasInput?(this._events=[[this.element.find("input"),{focus:e.proxy(this.show,this),keyup:e.proxy(this.update,this),keydown:e.proxy(this.keydown,this)}],[this.component,{click:e.proxy(this.show,this)}]],this.componentReset&&this._events.push([this.componentReset,{click:e.proxy(this.reset,this)}])):this.element.is("div")?this.isInline=!0:this._events=[[this.element,{click:e.proxy(this.show,this)}]];for(var t,i,n=0;n<this._events.length;n++)t=this._events[n][0],i=this._events[n][1],t.on(i)},_detachEvents:function(){for(var e,t,i=0;i<this._events.length;i++)e=this._events[i][0],t=this._events[i][1],e.off(t);this._events=[]},show:function(t){this.picker.show(),this.height=this.component?this.component.outerHeight():this.element.outerHeight(),this.forceParse&&this.update(),this.place(),e(window).on("resize",e.proxy(this.place,this)),t&&(t.stopPropagation(),t.preventDefault()),this.isVisible=!0,this.element.trigger({type:"show",date:this.date})},hide:function(t){this.isVisible&&(this.isInline||(this.picker.hide(),e(window).off("resize",this.place),this.viewMode=this.startViewMode,this.showMode(),this.isInput||e(document).off("mousedown",this.hide),this.forceParse&&(this.isInput&&this.element.val()||this.hasInput&&this.element.find("input").val())&&this.setValue(),this.isVisible=!1,this.element.trigger({type:"hide",date:this.date})))},remove:function(){this._detachEvents(),this.picker.remove(),delete this.picker,delete this.element.data().datetimepicker},getDate:function(){var e=this.getUTCDate();return new Date(e.getTime()+6e4*e.getTimezoneOffset())},getUTCDate:function(){return this.date},setDate:function(e){this.setUTCDate(new Date(e.getTime()-6e4*e.getTimezoneOffset()))},setUTCDate:function(e){e>=this.startDate&&e<=this.endDate?(this.date=e,this.setValue(),this.viewDate=this.date,this.fill()):this.element.trigger({type:"outOfRange",date:e,startDate:this.startDate,endDate:this.endDate})},setFormat:function(e){this.format=s.parseFormat(e,this.formatType);var t;this.isInput?t=this.element:this.component&&(t=this.element.find("input")),t&&t.val()&&this.setValue()},setValue:function(){var t=this.getFormattedDate();this.isInput?this.element.val(t):(this.component&&this.element.find("input").val(t),this.element.data("date",t)),this.linkField&&e("#"+this.linkField).val(this.getFormattedDate(this.linkFormat))},getFormattedDate:function(e){return void 0==e&&(e=this.format),s.formatDate(this.date,e,this.language,this.formatType)},setStartDate:function(e){this.startDate=e||-1/0,this.startDate!==-1/0&&(this.startDate=s.parseDate(this.startDate,this.format,this.language,this.formatType)),this.update(),this.updateNavArrows()},setEndDate:function(e){this.endDate=e||1/0,this.endDate!==1/0&&(this.endDate=s.parseDate(this.endDate,this.format,this.language,this.formatType)),this.update(),this.updateNavArrows()},setDaysOfWeekDisabled:function(t){this.daysOfWeekDisabled=t||[],e.isArray(this.daysOfWeekDisabled)||(this.daysOfWeekDisabled=this.daysOfWeekDisabled.split(/,\s*/)),this.daysOfWeekDisabled=e.map(this.daysOfWeekDisabled,function(e){return parseInt(e,10)}),this.update(),this.updateNavArrows()},place:function(){if(!this.isInline){var t=0;e("div").each(function(){var i=parseInt(e(this).css("zIndex"),10);i>t&&(t=i)});var i,n,s,a=t+10;this.component?(s=(i=this.component.offset()).left,"bottom-left"!=this.pickerPosition&&"top-left"!=this.pickerPosition||(s+=this.component.outerWidth()-this.picker.outerWidth())):s=(i=this.element.offset()).left,n="top-left"==this.pickerPosition||"top-right"==this.pickerPosition?i.top-this.picker.outerHeight():i.top+this.height,this.picker.css({top:n,left:s,zIndex:a})}},update:function(){var e,t=!1;arguments&&arguments.length&&("string"==typeof arguments[0]||arguments[0]instanceof Date)?(e=arguments[0],t=!0):("string"==typeof(e=this.element.data("date")||(this.isInput?this.element.val():this.element.find("input").val())||this.initialDate)||e instanceof String)&&(e=e.replace(/^\s+|\s+$/g,"")),e||(e=new Date,t=!1),this.date=s.parseDate(e,this.format,this.language,this.formatType),t&&this.setValue(),this.date<this.startDate?this.viewDate=new Date(this.startDate):this.date>this.endDate?this.viewDate=new Date(this.endDate):this.viewDate=new Date(this.date),this.fill()},fillDow:function(){for(var e=this.weekStart,t="<tr>";e<this.weekStart+7;)t+='<th class="dow">'+n[this.language].daysMin[e++%7]+"</th>";t+="</tr>",this.picker.find(".datetimepicker-days thead").append(t)},fillMonths:function(){for(var e="",t=0;t<12;)e+='<span class="month">'+n[this.language].monthsShort[t++]+"</span>";this.picker.find(".datetimepicker-months td").html(e)},fill:function(){if(null!=this.date&&null!=this.viewDate){var i=new Date(this.viewDate),a=i.getUTCFullYear(),r=i.getUTCMonth(),o=i.getUTCDate(),l=i.getUTCHours(),c=i.getUTCMinutes(),h=this.startDate!==-1/0?this.startDate.getUTCFullYear():-1/0,u=this.startDate!==-1/0?this.startDate.getUTCMonth():-1/0,d=this.endDate!==1/0?this.endDate.getUTCFullYear():1/0,p=this.endDate!==1/0?this.endDate.getUTCMonth():1/0,f=new t(this.date.getUTCFullYear(),this.date.getUTCMonth(),this.date.getUTCDate()).valueOf(),m=new Date;if(this.picker.find(".datetimepicker-days thead th:eq(1)").text(n[this.language].months[r]+" "+a),"time"==this.formatViewType){var g=l%12?l%12:12,v=(g<10?"0":"")+g,b=(c<10?"0":"")+c,_=n[this.language].meridiem[l<12?0:1];this.picker.find(".datetimepicker-hours thead th:eq(1)").text(v+":"+b+" "+_.toUpperCase()),this.picker.find(".datetimepicker-minutes thead th:eq(1)").text(v+":"+b+" "+_.toUpperCase())}else this.picker.find(".datetimepicker-hours thead th:eq(1)").text(o+" "+n[this.language].months[r]+" "+a),this.picker.find(".datetimepicker-minutes thead th:eq(1)").text(o+" "+n[this.language].months[r]+" "+a);this.picker.find("tfoot th.today").text(n[this.language].today).toggle(!1!==this.todayBtn),this.updateNavArrows(),this.fillMonths();var y=t(a,r-1,28,0,0,0,0),w=s.getDaysInMonth(y.getUTCFullYear(),y.getUTCMonth());y.setUTCDate(w),y.setUTCDate(w-(y.getUTCDay()-this.weekStart+7)%7);var T=new Date(y);T.setUTCDate(T.getUTCDate()+42),T=T.valueOf();for(var k,D=[];y.valueOf()<T;)y.getUTCDay()==this.weekStart&&D.push("<tr>"),k="",y.getUTCFullYear()<a||y.getUTCFullYear()==a&&y.getUTCMonth()<r?k+=" old":(y.getUTCFullYear()>a||y.getUTCFullYear()==a&&y.getUTCMonth()>r)&&(k+=" new"),this.todayHighlight&&y.getUTCFullYear()==m.getFullYear()&&y.getUTCMonth()==m.getMonth()&&y.getUTCDate()==m.getDate()&&(k+=" today"),y.valueOf()==f&&(k+=" active"),(y.valueOf()+864e5<=this.startDate||y.valueOf()>this.endDate||-1!==e.inArray(y.getUTCDay(),this.daysOfWeekDisabled))&&(k+=" disabled"),D.push('<td class="day'+k+'">'+y.getUTCDate()+"</td>"),y.getUTCDay()==this.weekEnd&&D.push("</tr>"),y.setUTCDate(y.getUTCDate()+1);this.picker.find(".datetimepicker-days tbody").empty().append(D.join("")),D=[];for(var C="",x="",M="",S=0;S<24;S++)k="",($=t(a,r,o,S)).valueOf()+36e5<=this.startDate||$.valueOf()>this.endDate?k+=" disabled":l==S&&(k+=" active"),this.showMeridian&&2==n[this.language].meridiem.length?((x=S<12?n[this.language].meridiem[0]:n[this.language].meridiem[1])!=M&&(""!=M&&D.push("</fieldset>"),D.push('<fieldset class="hour"><legend>'+x.toUpperCase()+"</legend>")),M=x,C=S%12?S%12:12,D.push('<span class="hour'+k+" hour_"+(S<12?"am":"pm")+'">'+C+"</span>"),23==S&&D.push("</fieldset>")):(C=S+":00",D.push('<span class="hour'+k+'">'+C+"</span>"));this.picker.find(".datetimepicker-hours td").html(D.join("")),D=[],C="",x="",M="";for(S=0;S<60;S+=this.minuteStep){var $=t(a,r,o,l,S,0);k="",$.valueOf()<this.startDate||$.valueOf()>this.endDate?k+=" disabled":Math.floor(c/this.minuteStep)==Math.floor(S/this.minuteStep)&&(k+=" active"),this.showMeridian&&2==n[this.language].meridiem.length?((x=l<12?n[this.language].meridiem[0]:n[this.language].meridiem[1])!=M&&(""!=M&&D.push("</fieldset>"),D.push('<fieldset class="minute"><legend>'+x.toUpperCase()+"</legend>")),M=x,C=l%12?l%12:12,D.push('<span class="minute'+k+'">'+C+":"+(S<10?"0"+S:S)+"</span>"),59==S&&D.push("</fieldset>")):(C=S+":00",D.push('<span class="minute'+k+'">'+l+":"+(S<10?"0"+S:S)+"</span>"))}this.picker.find(".datetimepicker-minutes td").html(D.join(""));var P=this.date.getUTCFullYear(),O=this.picker.find(".datetimepicker-months").find("th:eq(1)").text(a).end().find("span").removeClass("active");P==a&&O.eq(this.date.getUTCMonth()).addClass("active"),(a<h||a>d)&&O.addClass("disabled"),a==h&&O.slice(0,u).addClass("disabled"),a==d&&O.slice(p+1).addClass("disabled"),D="",a=10*parseInt(a/10,10);var U=this.picker.find(".datetimepicker-years").find("th:eq(1)").text(a+"-"+(a+9)).end().find("td");a-=1;for(S=-1;S<11;S++)D+='<span class="year'+(-1==S||10==S?" old":"")+(P==a?" active":"")+(a<h||a>d?" disabled":"")+'">'+a+"</span>",a+=1;U.html(D),this.place()}},updateNavArrows:function(){var e=new Date(this.viewDate),t=e.getUTCFullYear(),i=e.getUTCMonth(),n=e.getUTCDate(),s=e.getUTCHours();switch(this.viewMode){case 0:this.startDate!==-1/0&&t<=this.startDate.getUTCFullYear()&&i<=this.startDate.getUTCMonth()&&n<=this.startDate.getUTCDate()&&s<=this.startDate.getUTCHours()?this.picker.find(".prev").css({visibility:"hidden"}):this.picker.find(".prev").css({visibility:"visible"}),this.endDate!==1/0&&t>=this.endDate.getUTCFullYear()&&i>=this.endDate.getUTCMonth()&&n>=this.endDate.getUTCDate()&&s>=this.endDate.getUTCHours()?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"});break;case 1:this.startDate!==-1/0&&t<=this.startDate.getUTCFullYear()&&i<=this.startDate.getUTCMonth()&&n<=this.startDate.getUTCDate()?this.picker.find(".prev").css({visibility:"hidden"}):this.picker.find(".prev").css({visibility:"visible"}),this.endDate!==1/0&&t>=this.endDate.getUTCFullYear()&&i>=this.endDate.getUTCMonth()&&n>=this.endDate.getUTCDate()?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"});break;case 2:this.startDate!==-1/0&&t<=this.startDate.getUTCFullYear()&&i<=this.startDate.getUTCMonth()?this.picker.find(".prev").css({visibility:"hidden"}):this.picker.find(".prev").css({visibility:"visible"}),this.endDate!==1/0&&t>=this.endDate.getUTCFullYear()&&i>=this.endDate.getUTCMonth()?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"});break;case 3:case 4:this.startDate!==-1/0&&t<=this.startDate.getUTCFullYear()?this.picker.find(".prev").css({visibility:"hidden"}):this.picker.find(".prev").css({visibility:"visible"}),this.endDate!==1/0&&t>=this.endDate.getUTCFullYear()?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"})}},mousewheel:function(t){if(t.preventDefault(),t.stopPropagation(),!this.wheelPause){this.wheelPause=!0;var i=t.originalEvent.wheelDelta,n=i>0?1:0===i?0:-1;this.wheelViewModeNavigationInverseDirection&&(n=-n),this.showMode(n),setTimeout(e.proxy(function(){this.wheelPause=!1},this),this.wheelViewModeNavigationDelay)}},click:function(i){i.stopPropagation(),i.preventDefault();var n=e(i.target).closest("span, td, th, legend");if(1==n.length){if(n.is(".disabled"))return void this.element.trigger({type:"outOfRange",date:this.viewDate,startDate:this.startDate,endDate:this.endDate});switch(n[0].nodeName.toLowerCase()){case"th":switch(n[0].className){case"switch":this.showMode(1);break;case"prev":case"next":var a=s.modes[this.viewMode].navStep*("prev"==n[0].className?-1:1);switch(this.viewMode){case 0:this.viewDate=this.moveHour(this.viewDate,a);break;case 1:this.viewDate=this.moveDate(this.viewDate,a);break;case 2:this.viewDate=this.moveMonth(this.viewDate,a);break;case 3:case 4:this.viewDate=this.moveYear(this.viewDate,a)}this.fill();break;case"today":var r=new Date;(r=t(r.getFullYear(),r.getMonth(),r.getDate(),r.getHours(),r.getMinutes(),r.getSeconds(),0))<this.startDate?r=this.startDate:r>this.endDate&&(r=this.endDate),this.viewMode=this.startViewMode,this.showMode(0),this._setDate(r),this.fill(),this.autoclose&&this.hide()}break;case"span":if(!n.is(".disabled")){var o=this.viewDate.getUTCFullYear(),l=this.viewDate.getUTCMonth(),c=this.viewDate.getUTCDate(),h=this.viewDate.getUTCHours(),u=this.viewDate.getUTCMinutes(),d=this.viewDate.getUTCSeconds();if(n.is(".month")?(this.viewDate.setUTCDate(1),l=n.parent().find("span").index(n),c=this.viewDate.getUTCDate(),this.viewDate.setUTCMonth(l),this.element.trigger({type:"changeMonth",date:this.viewDate}),this.viewSelect>=3&&this._setDate(t(o,l,c,h,u,d,0))):n.is(".year")?(this.viewDate.setUTCDate(1),o=parseInt(n.text(),10)||0,this.viewDate.setUTCFullYear(o),this.element.trigger({type:"changeYear",date:this.viewDate}),this.viewSelect>=4&&this._setDate(t(o,l,c,h,u,d,0))):n.is(".hour")?(h=parseInt(n.text(),10)||0,(n.hasClass("hour_am")||n.hasClass("hour_pm"))&&(12==h&&n.hasClass("hour_am")?h=0:12!=h&&n.hasClass("hour_pm")&&(h+=12)),this.viewDate.setUTCHours(h),this.element.trigger({type:"changeHour",date:this.viewDate}),this.viewSelect>=1&&this._setDate(t(o,l,c,h,u,d,0))):n.is(".minute")&&(u=parseInt(n.text().substr(n.text().indexOf(":")+1),10)||0,this.viewDate.setUTCMinutes(u),this.element.trigger({type:"changeMinute",date:this.viewDate}),this.viewSelect>=0&&this._setDate(t(o,l,c,h,u,d,0))),0!=this.viewMode){p=this.viewMode;this.showMode(-1),this.fill(),p==this.viewMode&&this.autoclose&&this.hide()}else this.fill(),this.autoclose&&this.hide()}break;case"td":if(n.is(".day")&&!n.is(".disabled")){var c=parseInt(n.text(),10)||1,o=this.viewDate.getUTCFullYear(),l=this.viewDate.getUTCMonth(),h=this.viewDate.getUTCHours(),u=this.viewDate.getUTCMinutes(),d=this.viewDate.getUTCSeconds();n.is(".old")?0===l?(l=11,o-=1):l-=1:n.is(".new")&&(11==l?(l=0,o+=1):l+=1),this.viewDate.setUTCFullYear(o),this.viewDate.setUTCMonth(l,c),this.element.trigger({type:"changeDay",date:this.viewDate}),this.viewSelect>=2&&this._setDate(t(o,l,c,h,u,d,0))}var p=this.viewMode;this.showMode(-1),this.fill(),p==this.viewMode&&this.autoclose&&this.hide()}}},_setDate:function(e,t){t&&"date"!=t||(this.date=e),t&&"view"!=t||(this.viewDate=e),this.fill(),this.setValue();var i;this.isInput?i=this.element:this.component&&(i=this.element.find("input")),i&&(i.change(),this.autoclose),this.element.trigger({type:"changeDate",date:this.date})},moveMinute:function(e,t){if(!t)return e;var i=new Date(e.valueOf());return i.setUTCMinutes(i.getUTCMinutes()+t*this.minuteStep),i},moveHour:function(e,t){if(!t)return e;var i=new Date(e.valueOf());return i.setUTCHours(i.getUTCHours()+t),i},moveDate:function(e,t){if(!t)return e;var i=new Date(e.valueOf());return i.setUTCDate(i.getUTCDate()+t),i},moveMonth:function(e,t){if(!t)return e;var i,n,s=new Date(e.valueOf()),a=s.getUTCDate(),r=s.getUTCMonth(),o=Math.abs(t);if(t=t>0?1:-1,1==o)n=-1==t?function(){return s.getUTCMonth()==r}:function(){return s.getUTCMonth()!=i},i=r+t,s.setUTCMonth(i),(i<0||i>11)&&(i=(i+12)%12);else{for(var l=0;l<o;l++)s=this.moveMonth(s,t);i=s.getUTCMonth(),s.setUTCDate(a),n=function(){return i!=s.getUTCMonth()}}for(;n();)s.setUTCDate(--a),s.setUTCMonth(i);return s},moveYear:function(e,t){return this.moveMonth(e,12*t)},dateWithinRange:function(e){return e>=this.startDate&&e<=this.endDate},keydown:function(e){if(this.picker.is(":not(:visible)"))27==e.keyCode&&this.show();else{var t,i,n,s=!1;switch(e.keyCode){case 27:this.hide(),e.preventDefault();break;case 37:case 39:if(!this.keyboardNavigation)break;t=37==e.keyCode?-1:1,viewMode=this.viewMode,e.ctrlKey?viewMode+=2:e.shiftKey&&(viewMode+=1),4==viewMode?(i=this.moveYear(this.date,t),n=this.moveYear(this.viewDate,t)):3==viewMode?(i=this.moveMonth(this.date,t),n=this.moveMonth(this.viewDate,t)):2==viewMode?(i=this.moveDate(this.date,t),n=this.moveDate(this.viewDate,t)):1==viewMode?(i=this.moveHour(this.date,t),n=this.moveHour(this.viewDate,t)):0==viewMode&&(i=this.moveMinute(this.date,t),n=this.moveMinute(this.viewDate,t)),this.dateWithinRange(i)&&(this.date=i,this.viewDate=n,this.setValue(),this.update(),e.preventDefault(),s=!0);break;case 38:case 40:if(!this.keyboardNavigation)break;t=38==e.keyCode?-1:1,viewMode=this.viewMode,e.ctrlKey?viewMode+=2:e.shiftKey&&(viewMode+=1),4==viewMode?(i=this.moveYear(this.date,t),n=this.moveYear(this.viewDate,t)):3==viewMode?(i=this.moveMonth(this.date,t),n=this.moveMonth(this.viewDate,t)):2==viewMode?(i=this.moveDate(this.date,7*t),n=this.moveDate(this.viewDate,7*t)):1==viewMode?this.showMeridian?(i=this.moveHour(this.date,6*t),n=this.moveHour(this.viewDate,6*t)):(i=this.moveHour(this.date,4*t),n=this.moveHour(this.viewDate,4*t)):0==viewMode&&(i=this.moveMinute(this.date,4*t),n=this.moveMinute(this.viewDate,4*t)),this.dateWithinRange(i)&&(this.date=i,this.viewDate=n,this.setValue(),this.update(),e.preventDefault(),s=!0);break;case 13:if(0!=this.viewMode){var a=this.viewMode;this.showMode(-1),this.fill(),a==this.viewMode&&this.autoclose&&this.hide()}else this.fill(),this.autoclose&&this.hide();e.preventDefault();break;case 9:this.hide()}if(s){var r;this.isInput?r=this.element:this.component&&(r=this.element.find("input")),r&&r.change(),this.element.trigger({type:"changeDate",date:this.date})}}},showMode:function(e){if(e){var t=Math.max(0,Math.min(s.modes.length-1,this.viewMode+e));t>=this.minView&&t<=this.maxView&&(this.element.trigger({type:"changeMode",date:this.viewDate,oldViewMode:this.viewMode,newViewMode:t}),this.viewMode=t)}this.picker.find(">div").hide().filter(".datetimepicker-"+s.modes[this.viewMode].clsName).css("display","block"),this.updateNavArrows()},reset:function(e){this._setDate(null,"date")}},e.fn.datetimepicker=function(t){var n=Array.apply(null,arguments);return n.shift(),this.each(function(){var s=e(this),a=s.data("datetimepicker"),r="object"==typeof t&&t;a||s.data("datetimepicker",a=new i(this,e.extend({},e.fn.datetimepicker.defaults,r))),"string"==typeof t&&"function"==typeof a[t]&&a[t].apply(a,n)})},e.fn.datetimepicker.defaults={},e.fn.datetimepicker.Constructor=i;var n=e.fn.datetimepicker.dates={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sun"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa","Su"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],meridiem:["am","pm"],suffix:["st","nd","rd","th"],today:"Today"}},s={modes:[{clsName:"minutes",navFnc:"Hours",navStep:1},{clsName:"hours",navFnc:"Date",navStep:1},{clsName:"days",navFnc:"Month",navStep:1},{clsName:"months",navFnc:"FullYear",navStep:1},{clsName:"years",navFnc:"FullYear",navStep:10}],isLeapYear:function(e){return e%4==0&&e%100!=0||e%400==0},getDaysInMonth:function(e,t){return[31,s.isLeapYear(e)?29:28,31,30,31,30,31,31,30,31,30,31][t]},getDefaultFormat:function(e,t){if("standard"==e)return"input"==t?"yyyy-mm-dd hh:ii":"yyyy-mm-dd hh:ii:ss";if("php"==e)return"input"==t?"Y-m-d H:i":"Y-m-d H:i:s";throw new Error("Invalid format type.")},validParts:function(e){if("standard"==e)return/hh?|HH?|p|P|ii?|ss?|dd?|DD?|mm?|MM?|yy(?:yy)?/g;if("php"==e)return/[dDjlNwzFmMnStyYaABgGhHis]/g;throw new Error("Invalid format type.")},nonpunctuation:/[^ -\/:-@\[-`{-~\t\n\rTZ]+/g,parseFormat:function(e,t){var i=e.replace(this.validParts(t),"\0").split("\0"),n=e.match(this.validParts(t));if(!i||!i.length||!n||0==n.length)throw new Error("Invalid date format.");return{separators:i,parts:n}},parseDate:function(s,a,r,o){if(s instanceof Date){var l=new Date(s.valueOf()-6e4*s.getTimezoneOffset());return l.setMilliseconds(0),l}if(/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(s)&&(a=this.parseFormat("yyyy-mm-dd",o)),/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}$/.test(s)&&(a=this.parseFormat("yyyy-mm-dd hh:ii",o)),/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}\:\d{1,2}[Z]{0,1}$/.test(s)&&(a=this.parseFormat("yyyy-mm-dd hh:ii:ss",o)),/^[-+]\d+[dmwy]([\s,]+[-+]\d+[dmwy])*$/.test(s)){var c,h=/([-+]\d+)([dmwy])/,u=s.match(/([-+]\d+)([dmwy])/g);s=new Date;for(b=0;b<u.length;b++)switch(f=h.exec(u[b]),c=parseInt(f[1]),f[2]){case"d":s.setUTCDate(s.getUTCDate()+c);break;case"m":s=i.prototype.moveMonth.call(i.prototype,s,c);break;case"w":s.setUTCDate(s.getUTCDate()+7*c);break;case"y":s=i.prototype.moveYear.call(i.prototype,s,c)}return t(s.getUTCFullYear(),s.getUTCMonth(),s.getUTCDate(),s.getUTCHours(),s.getUTCMinutes(),s.getUTCSeconds(),0)}var d,p,f,u=s&&s.match(this.nonpunctuation)||[],s=new Date(0,0,0,0,0,0,0),m={},g=["hh","h","ii","i","ss","s","yyyy","yy","M","MM","m","mm","D","DD","d","dd","H","HH","p","P"],v={hh:function(e,t){return e.setUTCHours(t)},h:function(e,t){return e.setUTCHours(t)},HH:function(e,t){return e.setUTCHours(12==t?0:t)},H:function(e,t){return e.setUTCHours(12==t?0:t)},ii:function(e,t){return e.setUTCMinutes(t)},i:function(e,t){return e.setUTCMinutes(t)},ss:function(e,t){return e.setUTCSeconds(t)},s:function(e,t){return e.setUTCSeconds(t)},yyyy:function(e,t){return e.setUTCFullYear(t)},yy:function(e,t){return e.setUTCFullYear(2e3+t)},m:function(e,t){for(t-=1;t<0;)t+=12;for(t%=12,e.setUTCMonth(t);e.getUTCMonth()!=t;)e.setUTCDate(e.getUTCDate()-1);return e},d:function(e,t){return e.setUTCDate(t)},p:function(e,t){return e.setUTCHours(1==t?e.getUTCHours()+12:e.getUTCHours())}};if(v.M=v.MM=v.mm=v.m,v.dd=v.d,v.P=v.p,s=t(s.getFullYear(),s.getMonth(),s.getDate(),s.getHours(),s.getMinutes(),s.getSeconds()),u.length==a.parts.length){for(var b=0,_=a.parts.length;b<_;b++){if(d=parseInt(u[b],10),f=a.parts[b],isNaN(d))switch(f){case"MM":p=e(n[r].months).filter(function(){var e=this.slice(0,u[b].length);return e==u[b].slice(0,e.length)}),d=e.inArray(p[0],n[r].months)+1;break;case"M":p=e(n[r].monthsShort).filter(function(){var e=this.slice(0,u[b].length);return e==u[b].slice(0,e.length)}),d=e.inArray(p[0],n[r].monthsShort)+1;break;case"p":case"P":d=e.inArray(u[b].toLowerCase(),n[r].meridiem)}m[f]=d}for(var y,b=0;b<g.length;b++)(y=g[b])in m&&!isNaN(m[y])&&v[y](s,m[y])}return s},formatDate:function(t,i,a,r){if(null==t)return"";var o;if("standard"==r)o={yy:t.getUTCFullYear().toString().substring(2),yyyy:t.getUTCFullYear(),m:t.getUTCMonth()+1,M:n[a].monthsShort[t.getUTCMonth()],MM:n[a].months[t.getUTCMonth()],d:t.getUTCDate(),D:n[a].daysShort[t.getUTCDay()],DD:n[a].days[t.getUTCDay()],p:2==n[a].meridiem.length?n[a].meridiem[t.getUTCHours()<12?0:1]:"",h:t.getUTCHours(),i:t.getUTCMinutes(),s:t.getUTCSeconds()},2==n[a].meridiem.length?o.H=o.h%12==0?12:o.h%12:o.H=o.h,o.HH=(o.H<10?"0":"")+o.H,o.P=o.p.toUpperCase(),o.hh=(o.h<10?"0":"")+o.h,o.ii=(o.i<10?"0":"")+o.i,o.ss=(o.s<10?"0":"")+o.s,o.dd=(o.d<10?"0":"")+o.d,o.mm=(o.m<10?"0":"")+o.m;else{if("php"!=r)throw new Error("Invalid format type.");(o={y:t.getUTCFullYear().toString().substring(2),Y:t.getUTCFullYear(),F:n[a].months[t.getUTCMonth()],M:n[a].monthsShort[t.getUTCMonth()],n:t.getUTCMonth()+1,t:s.getDaysInMonth(t.getUTCFullYear(),t.getUTCMonth()),j:t.getUTCDate(),l:n[a].days[t.getUTCDay()],D:n[a].daysShort[t.getUTCDay()],w:t.getUTCDay(),N:0==t.getUTCDay()?7:t.getUTCDay(),S:t.getUTCDate()%10<=n[a].suffix.length?n[a].suffix[t.getUTCDate()%10-1]:"",a:2==n[a].meridiem.length?n[a].meridiem[t.getUTCHours()<12?0:1]:"",g:t.getUTCHours()%12==0?12:t.getUTCHours()%12,G:t.getUTCHours(),i:t.getUTCMinutes(),s:t.getUTCSeconds()}).m=(o.n<10?"0":"")+o.n,o.d=(o.j<10?"0":"")+o.j,o.A=o.a.toString().toUpperCase(),o.h=(o.g<10?"0":"")+o.g,o.H=(o.G<10?"0":"")+o.G,o.i=(o.i<10?"0":"")+o.i,o.s=(o.s<10?"0":"")+o.s}for(var t=[],l=e.extend([],i.separators),c=0,h=i.parts.length;c<h;c++)l.length&&t.push(l.shift()),t.push(o[i.parts[c]]);return l.length&&t.push(l.shift()),t.join("")},convertViewMode:function(e){switch(e){case 4:case"decade":e=4;break;case 3:case"year":e=3;break;case 2:case"month":e=2;break;case 1:case"day":e=1;break;case 0:case"hour":e=0}return e},headTemplate:'<thead><tr><th class="prev"><i class="icon-arrow-left glyphicon glyphicon-chevron-left"/></th><th colspan="5" class="switch"></th><th class="next"><i class="icon-arrow-right glyphicon glyphicon-chevron-right"/></th></tr></thead>',headTemplateV3:'<thead><tr><th class="prev"><i class="glyphicon glyphicon-arrow-left"></i> </th><th colspan="5" class="switch"></th><th class="next"><i class="glyphicon glyphicon-arrow-right"></i> </th></tr></thead>',contTemplate:'<tbody><tr><td colspan="7"></td></tr></tbody>',footTemplate:'<tfoot><tr><th colspan="3" class="date-clear">清除</th><th colspan="4" class="today"></th></tr></tfoot>'};s.template='<div class="datetimepicker"><div class="datetimepicker-minutes"><table class=" table-condensed">'+s.headTemplate+s.contTemplate+s.footTemplate+'</table></div><div class="datetimepicker-hours"><table class=" table-condensed">'+s.headTemplate+s.contTemplate+s.footTemplate+'</table></div><div class="datetimepicker-days"><table class=" table-condensed">'+s.headTemplate+"<tbody></tbody>"+s.footTemplate+'</table></div><div class="datetimepicker-months"><table class="table-condensed">'+s.headTemplate+s.contTemplate+s.footTemplate+'</table></div><div class="datetimepicker-years"><table class="table-condensed">'+s.headTemplate+s.contTemplate+s.footTemplate+"</table></div></div>",s.templateV3='<div class="datetimepicker"><div class="datetimepicker-minutes"><table class=" table-condensed">'+s.headTemplateV3+s.contTemplate+s.footTemplate+'</table></div><div class="datetimepicker-hours"><table class=" table-condensed">'+s.headTemplateV3+s.contTemplate+s.footTemplate+'</table></div><div class="datetimepicker-days"><table class=" table-condensed">'+s.headTemplateV3+"<tbody></tbody>"+s.footTemplate+'</table></div><div class="datetimepicker-months"><table class="table-condensed">'+s.headTemplateV3+s.contTemplate+s.footTemplate+'</table></div><div class="datetimepicker-years"><table class="table-condensed">'+s.headTemplateV3+s.contTemplate+s.footTemplate+"</table></div></div>",e.fn.datetimepicker.DPGlobal=s,e.fn.datetimepicker.noConflict=function(){return e.fn.datetimepicker=old,this},e(document).on("focus.datetimepicker.data-api click.datetimepicker.data-api",'[data-provide="datetimepicker"]',function(t){var i=e(this);i.data("datetimepicker")||(t.preventDefault(),i.datetimepicker("show"))}),e(function(){e('[data-provide="datetimepicker-inline"]').datetimepicker()})}(window.jQuery),jQuery.fn.datetimepicker.dates["zh-CN"]={days:["星期日","星期一","星期二","星期三","星期四","星期五","星期六","星期日"],daysShort:["周日","周一","周二","周三","周四","周五","周六","周日"],daysMin:["日","一","二","三","四","五","六","日"],months:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],monthsShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],today:"今日",suffix:[],meridiem:[]},angular.module("uia",["ui.bootstrap","permission","toaster","localytics.directives"]),angular.module("uia").directive("btnLoading",[function(){return{restrict:"A",link:function(e,t,i){var n=i.btnLoadingText;n||(n="<i class='icon-spinner'>&nbsp;稍等</i>"),i.prevText=t.html(),e.$watch(function(){return e.$eval(i.btnLoading)},function(e){angular.isDefined(e)&&(e?(t.attr("disabled",!0),t.html(n)):(t.removeAttr("disabled"),t.html(i.prevText)))})}}}]).directive("ngEnter",function(){return function(e,t,i){t.bind("keydown keypress",function(t){13===t.which&&(e.$apply(function(){e.$eval(i.ngEnter)}),t.preventDefault())})}}).directive("btnClose",["uiaDialog",function(e){return{restrict:"E",replace:"true",template:'<button class="btn" type="button" ng-click="closeWindow()" data-tooltip="关闭"><i class="icon-remove-sign">&nbsp;&nbsp;</i></button>',scope:{eventClick:"&",formName:"@",spreadName:"="},link:function(t,i,n,s){var a,r=i[0].form;r&&(a=angular.element(r).scope()[r.name]),t.closeWindow=function(){var i=t.formName;a&&a.$dirty||i&&t.$parent&&t.$parent[i].$dirty||l()?e.confirm("存在已修改且未保存的数据，请确认是否关闭？").then(function(){t.eventClick&&t.eventClick(),window.close()}):(t.eventClick&&t.eventClick(),window.close())};var o=t.spreadName,l=function(){if(!t.spreadName)return!1;for(var e=0;e<o.length;e++){var i=o[e];if(t.$parent[i].spread.getActiveSheet().getDirtyRows().length>0)return!0}return!1}}}}]).directive("btnCancel",["uiaDialog",function(e){return{restrict:"E",replace:!0,template:'<button class="btn" type="button" ng-click="click()"><i class="icon-undo">&nbsp;&nbsp;取消</i></button>',scope:{eventClick:"&",formName:"@",spreadName:"="},link:function(t,i,n,s){var a,r=t.formName,o=i[0].form;o&&(a=angular.element(o).scope()[o.name]),t.click=function(){a&&a.$dirty||r&&t.$parent&&t.$parent[r].$dirty?e.confirm("存在已修改且未保存的数据，请确认是否取消？").then(function(){t.eventClick(),i.parents("form").find(".error-popover").remove(),void 0!=a&&a.$dirty&&a.$setPristine(!0),r&&t.$parent[r].$dirty&&t.$parent[r].$setPristine(!0)}):(t.eventClick(),i.parents("form").find(".error-popover").remove())}}}}]).directive("auditBtn",["AuditService","uiaDialog","AuditAPI",function(e,t,i){return{restrict:"E",scope:{auditCallback:"=",auditType:"@",auditId:"=",auditStatus:"="},replace:!0,template:'<div><button class="btn" type="button" ng-show="auditStatus" ng-click="viewHistory()"><i class="icon-eye-open">&nbsp;&nbsp;查看审核历史</i></button><button class="btn" type="button" ng-show="canReject" ng-click="rejectTransaction()"><i class="icon-edit">&nbsp;&nbsp;反审批</i></button><button class="btn" type="button" ng-show="canApprove" ng-click="approveTransaction()"><i class="icon-edit">&nbsp;&nbsp;审批</i></button><button class="btn" type="button" ng-show="canRevoke" ng-click="revokeTransaction()"><i class="icon-undo">&nbsp;&nbsp;撤销提交</i></button><button class="btn" type="button" ng-show="canSubmit" ng-click="submitTransaction()"><i class="icon-cloud-upload">&nbsp;&nbsp;提交</i></button></div>',link:function(t,n,s,a){t.$watch("auditStatus",function(e,n){t.canReject=!1,t.canApprove=!1,t.canRevoke=!1,t.canSubmit=!1,t.auditId&&("3AUDITTING"==t.auditStatus?(i.checkApprove({transactionType:t.auditType,id:t.auditId},function(e){e.permitted&&(t.canApprove=!0)}),i.checkRevoke({transactionType:t.auditType,id:t.auditId},function(e){e.permitted&&(t.canRevoke=!0)})):"4AUDITTED"==t.auditStatus?i.checkReject({transactionType:t.auditType,id:t.auditId},function(e){e.permitted&&(t.canReject=!0)}):"1SAVED"!=t.auditStatus&&"2SUBMITTED"!=t.auditStatus||i.checkSubmit({transactionType:t.auditType,id:t.auditId},function(e){e.permitted&&(t.canSubmit=!0)}))}),t.approveTransaction=function(){e.showApproveDialog(t.auditType,t.auditId,function(e){t.canRevoke=!1,t.canApprove=!1,i.checkApprove({transactionType:t.auditType,id:t.auditId},function(e){e.permitted&&(t.canApprove=!0)}),t.auditCallback(e)})},t.rejectTransaction=function(){e.reject(t.auditType,t.auditId,t.auditCallback)},t.revokeTransaction=function(){e.revoke(t.auditType,t.auditId,t.auditCallback)},t.submitTransaction=function(){e.submit(t.auditType,t.auditId,t.auditCallback)},t.viewHistory=function(){e.viewHistory(t.auditType,t.auditId)}}}}]).directive("btnAdd",[function(){return{restrict:"E",replace:!0,template:'<button type="button" class="btn" ng-click="click()" uib-tooltip="新增" data-tooltip-placement="bottom"><i class="icon icon-plus">&nbsp;&nbsp;新增</i></button>',scope:{eventClick:"&"},link:function(e,t,i,n){e.click=function(){e.eventClick()}}}}]).directive("btnDelete",[function(){return{restrict:"E",replace:!0,template:'<button type="button" class="btn" ng-click="click()"><i class="icon icon-trash">&nbsp;&nbsp;删除</i></button>',scope:{eventClick:"&"},link:function(e,t,i,n){e.click=function(){e.eventClick()}}}}]).directive("btnView",[function(){return{restrict:"E",replace:"true",template:'<button type="button" class="btn" ng-click="click()"><i class="icon icon-eye-open">&nbsp;&nbsp;查看</i></button>',scope:{eventClick:"&"},link:function(e,t,i,n){e.click=function(){e.eventClick()}}}}]).directive("btnSave",[function(){return{restrict:"E",replace:"true",template:'<button type="submit" btn-loading="saveBtnLoading" btn-loading-text="<i class=\'icon-spinner\'>&nbsp;&nbsp;保存中</i>" class="btn" ng-click="click()"><i class="icon icon-ok">&nbsp;&nbsp;保存</i></button>',scope:{eventClick:"&"},link:function(e,t,i,n){e.click=function(){e.eventClick()}}}}]).directive("btnEdit",[function(){return{restrict:"E",replace:"true",template:'<button type="button" class="btn" ng-click="click()"><i class="icon-edit">&nbsp;&nbsp;修改</i></button>',scope:{eventClick:"&"},link:function(e,t,i,n){e.click=function(){e.eventClick()}}}}]).directive("btnRefresh",[function(){return{restrict:"E",replace:"true",template:'<button type="button" class="btn" btn-loading="pageSetting.queryBtnLoading" ng-click="click()"><i class="icon-refresh">&nbsp;&nbsp;刷新</i></button>',scope:{eventClick:"&"},link:function(e,t,i,n){e.click=function(){e.eventClick()}}}}]).directive("btnRevise",[function(){return{restrict:"E",replace:"true",template:'<button type="button" class="btn" ng-click="click()"><i class="icon-pencil">&nbsp;&nbsp;修订</i></button>',scope:{eventClick:"&"},link:function(e,t,i,n){e.click=function(){e.eventClick()}}}}]).directive("btnFilter",function(){return{restrict:"E",replace:"true",template:'<button type="button" class="btn" ng-click="click()"><i class="icon icon-filter">&nbsp;&nbsp;{{text}}</i></button>',scope:{eventClick:"&",btnText:"@?"},link:function(e,t,i,n){i.btnText?e.text=i.btnText:e.text="过滤",e.click=function(){e.eventClick()}}}}).directive("btnSearch",function(){return{restrict:"E",replace:"true",template:'<button type="button" class="btn uia-btn {{class}}" ng-click="click()"><i class="icon icon-search">&nbsp;&nbsp;{{text}}</i></button>',scope:{eventClick:"&",btnText:"@?",btnClass:"@?"},link:function(e,t,i,n){i.btnText?e.text=i.btnText:e.text="搜索",i.btnClass?e.class=i.btnClass:e.class="",e.click=function(){e.eventClick()}}}}).directive("btnReset",function(){return{restrict:"E",replace:"true",template:'<button type="reset" class="btn uia-btn {{class}}" ng-click="click()"><i class="icon icon-undo">&nbsp;&nbsp;{{text}}</i></button>',scope:{eventClick:"&",btnText:"@?",btnClass:"@?"},link:function(e,t,i,n){i.btnText?e.text=i.btnText:e.text="重置",i.btnClass?e.class=i.btnClass:e.class="",e.click=function(){e.eventClick()}}}}).directive("btnExport",[function(){return{restrict:"E",replace:"true",template:'<button type="button" class="btn" btn-loading="uploadBtnLoading" ng-click="click()"><i class="icon-upload-alt">&nbsp;&nbsp;{{text}}</i></button>',scope:{eventClick:"&",btnText:"@?"},link:function(e,t,i,n){i.btnText?e.text=i.btnText:e.text="导出",e.click=function(){e.eventClick()}}}}]).directive("btnImport",[function(){return{restrict:"E",replace:"true",template:'<button type="button" class="btn" ng-click="handleClick()" btn-loading="uploadBtnLoading"><i class="icon-download-alt">&nbsp;&nbsp;导入</i></button>',scope:{eventChange:"&",fileModel:"="},link:function(e,t,i,n){e.handleClick=function(){var t=1;e.$watch("fileModel",function(i,n){e.fileModel&&i&&i!=n&&1==t&&(e.eventChange(),t++)})}}}}]).directive("btnDownload",["$timeout","$q","uiaDialog",function(e,t,i){return{restrict:"E",replace:"true",template:'<button type="button" class="btn" ng-click="handleClick()"><i class="icon-cloud-download">&nbsp;&nbsp;{{text}}</i></button>',scope:{btnText:"@",downloadUrl:"=",downloadParams:"=",downloadHref:"@"},link:function(n,s,a){a.btnText?n.text=a.btnText:n.text="下载模板",n.handleClick=function(){a.downloadUrl||a.downloadHref||i.alert("btn-down directive only choice one attribute: download-url or download-href.");var s=t.defer(),r=angular.element("<iframe/>");return r.attr({style:"display:none",src:function(){var e="";if(a.downloadParams)for(var t in n.downloadParams)e+=""==e?"?"+t+"="+encodeURIComponent(n.downloadParams[t]):"&"+t+"="+encodeURIComponent(n.downloadParams[t]);return a.downloadUrl?n.downloadUrl+e:a.downloadHref?n.downloadHref+e:void 0},onLoad:function(){e(function(){r.remove()},5e4)}}),angular.element("body").append(r),s.promise}}}}]),angular.module("uia").factory("uiaConfig",[function(){return{loginUrl:"/login",logoutUrl:"/logout",accountInfoUrl:"/account",menuUrl:"/nav/menu"}}]),angular.module("uia").controller("AppUIACtrl",["$scope","$uibModal","uiaDialog","$timeout","$interval","$http","uiaConfig","$rootScope",function(e,t,n,s,a,r,o,l){function c(t){if((t=t||window.event).preventDefault(),t.wheelDelta&&e.showTabScroll)if(t.wheelDelta>0)e.breadcrumbMove("left",t.wheelDelta);else if(t.wheelDelta<0){t.wheelDelta;e.breadcrumbMove("right",-t.wheelDelta)}}function h(e){var t={};t.tab=e;var i=JSON.stringify(t);localStorage.setItem("userCollections",i)}function u(t){if(localStorage.getItem("userCollections")){var i=JSON.parse(localStorage.getItem("userCollections"));console.log(i),e.collectTabs=i.tab}t&&d()}function d(){e.collectTabs.length?angular.forEach(e.tabs,function(t,i,n){t.collected=!1,angular.forEach(e.collectTabs,function(e,i,n){t.id==e.id&&(t.collected=!0)})}):angular.forEach(e.tabs,function(e,t,i){e.collected=!1})}l.logOutUrl=o.logoutUrl;var p=null;window.top.setSessionTimeout=function(e){p&&a.cancel(p),p=a(function(){a.cancel(p),n.confirm("会话即将超时，会话将5分钟后失效，单击【确定】将保持当前会话。").then(function(){r.get(o.accountInfoUrl)})},15e5)},e.appSetting={aside:!1,activeAside:!1,menuToggler:!1,showTabScroll:!1,showFootprints:!1,tabNav:!0},e.toasterOptions={"position-class":"toast-bottom-right","close-button":!0},e.userSet=function(){t.open({templateUrl:"user-setting-modal.html",resolve:{userSetting:function(){return localStorage.getItem("userSettings")?JSON.parse(localStorage.getItem("userSettings")):{theme:"lightBlue",tabNav:!0}}},size:"",windowClass:"user-setting-modal",controller:["$scope","$uibModalInstance","userSetting",function(e,t,i){e.userTheme=i.theme,e.themesList=[{name:"blueDream",colors:[{color:"#015d79"},{color:"#126e8a"},{color:"#237f9b"},{color:"#45a1bd"}]},{name:"blueOcean",colors:[{color:"#057ea5"},{color:"#168fb6"},{color:"#27a0c7"},{color:"#49c2e9"}]},{name:"blueSky",colors:[{color:"#3296b7"},{color:"#43a7c8"},{color:"#54b8d9"},{color:"#76dafb"}]},{name:"spring",colors:[{color:"#69a059"},{color:"#7ab16a"},{color:"#8bc27b"},{color:"#ade49d"}]},{name:"summer",colors:[{color:"#367725"},{color:"#478836"},{color:"#589947"},{color:"#7abb69"}]},{name:"vitalityOrange",colors:[{color:"#b35121"},{color:"#c46232"},{color:" #d57343"},{color:"#e68454"}]},{name:"autumn",colors:[{color:"#9c6d4b"},{color:"#ad7e5c"},{color:"#be8f6d"},{color:"#e0b18f"}]},{name:"winter",colors:[{color:"#827e6b"},{color:"#938f7c"},{color:"#a4a08d"},{color:"#c6c2af"}]},{name:"chineseRed",colors:[{color:"#bf4444"},{color:"#D05555"},{color:"#e16666"},{color:"#f27777"}]},{name:"lightBlue",colors:[{color:"#D1E2FF"},{color:"#E0ECFF"},{color:"#EDF4FF"},{color:"#F6FAFF"}]}],angular.forEach(e.themesList,function(t,i,n){t.name==e.userTheme&&(e.current=t)}),e.choice=function(t){e.current=t},e.switch=function(){e.switchType?e.switchType=!1:e.switchType=!0},e.yes=function(){t.close({theme:e.current,tabNav:e.switchType})},e.no=function(){t.dismiss()},void 0!=i.tabNav&&null!=i.tabNav?e.switchType=i.tabNav:e.switchType=!0}]}).result.then(function(e){if(e){var t=e.theme.name,i={};i.theme=t,i.tabNav=e.tabNav;var n=JSON.stringify(i);localStorage.setItem("userSettings",n),window.location.reload()}})};var f=function(){var e=0;return angular.forEach(angular.element("#breadcrumbs .tab-header"),function(t,i,n){e+=t.offsetWidth}),e},m=function(t){e.viewWidth=angular.element("#breadcrumbs").eq(0).width()-72,e.tabLiWidth=f(),e.tabLiWidth>e.viewWidth?(e.showTabScroll=!0,t||angular.element("#breadcrumb").animate({left:e.viewWidth-e.tabLiWidth-28+"px"},200,"linear")):(e.showTabScroll=!1,angular.element("#breadcrumb").animate({left:"0px"},200,"linear"))};e.navActive="100000",e.openTab=function(t,i,n){if(e.navActive=t,!g(t)){if(e.tabs.push({name:n,id:t,src:i}),console.log("title:",n,"tabId:",t,"Url:",i),!e.appSetting.footprints)var a=s(function(){m(),clearTimeout(a)},20);d()}},e.changeCurrentTab=function(t){e.navActive=t.id};var g=function(t){for(var i=0;i<e.tabs.length;i++)if(e.tabs[i].id==t)return!0;return!1};e.tabs=[{name:"主页",id:"100000",src:"/home"}];var v=function(t){if("100000"!=t){for(var i=0;i<e.tabs.length;i++)e.tabs[i].id==t&&e.tabs.splice(i,1);e.navActive=e.tabs[e.tabs.length-1].id,e.appSetting.footprints||s(function(){m("close")},30)}else n.alert("首页不能关闭")};e.closeAllTab=function(){n.confirm("是否关闭所有标签").then(function(){e.tabs.splice(1,e.tabs.length-1),e.navActive="100000"})},e.closeTabByTabId=function(e){if(e){var t=angular.element("#tabIFrame_"+e)[0],s=t.contentWindow.angular?t.contentWindow.angular.element("form"):null,a=t.contentWindow.angular?t.contentWindow.angular.element("#content"):null;if(s&&s.length>0)for(i=0;i<s.length;i++){var r=s.eq(i),o=null;if(r.scope()&&r.scope()[r[0].name]&&(o=r.scope()[r[0].name]),o&&o.$dirty&&!o.ignoreTip)return void n.confirm("编辑状态存在已修改且未保存的数据，是否确认关闭？").then(function(){a&&a.scope()&&a.scope().childrenTabClose?a.scope().childrenTabClose(e):v(e)});v(e)}else{if(a&&a.scope()&&a.scope().checkUpdatedForm&&a.scope().checkUpdatedForm.$dirty)return void n.confirm("编辑状态存在已修改且未保存的数据，是否确认关闭？").then(function(){v(e)});v(e)}}},e.closeOtherTab=function(t){n.confirm("确定关闭其它所有标签").then(function(){e.rootTabs=[{name:"主页",id:"100000",src:"/home"}],"100000"!=t.id&&e.rootTabs.push(t),e.tabs=e.rootTabs,angular.element("#breadcrumb").animate({left:"0px"},200,"linear"),e.navActive=tabId})},window.PortalTab={open:function(t,i,n){e.$apply(function(){e.openTab(t,i,n)})},removeTabByTabId:function(t){e.$apply(function(){e.closeTabByTabId(t)})}},e.breadcrumbMove=function(t,i){var n;i?(i=i,n=0):(i=240,n=200);var s=angular.element("#breadcrumb").css("left"),a=parseInt(s.slice(0,s.length-2)),r=e.viewWidth-e.tabLiWidth;e.showTabScroll&&("left"==t?a<-i?angular.element("#breadcrumb").animate({left:a+i+"px"},n,"linear"):a>=-i&&a<=0&&angular.element("#breadcrumb").animate({left:"0px"},n,"linear"):"right"==t&&a>r&&(a-i>r?angular.element("#breadcrumb").animate({left:a-i+"px"},n,"linear"):a-i<=r&&angular.element("#breadcrumb").animate({left:r-28+"px"},n,"linear")))},e.scrollEvent=function(e,t){e?t.target.addEventListener("mousewheel",c,!1):t.target.removeEventListener("mousewheel",c,!1)},e.collectTabs=[],e.collectTab=function(t){t&&(t.collected?t.collected&&(t.collected=!1,angular.forEach(e.collectTabs,function(i,s,a){i.id==t.id&&(e.collectTabs.splice(s,1),h(e.collectTabs),n.alert("已取消收藏"))})):(t.collected=!0,e.collectTabs.push(t),h(e.collectTabs),n.alert("成功添加收藏")))},e.myCollections=function(){t.open({templateUrl:"user-collections.html",resolve:{collectTabs:function(){return e.collectTabs}},size:"",windowClass:"user-setting-modal user-collections",controller:["$scope","$uibModalInstance","collectTabs","$timeout",function(e,t,i,s){e.collectTabs=angular.copy(i),e.currentList=[],e.removeCollection=function(t,i){i.stopPropagation(),t.unCollected=!0;var n=s(function(){angular.forEach(e.collectTabs,function(i,n,s){i.id==t.id&&(e.collectTabs.splice(n,1),h(e.collectTabs),u(!0))}),s.cancel(n)},100)},e.choice=function(e){e.choiced=!e.choiced},e.choiceSave=function(i){e.currentList=[],e.currentList.push(i),t.close(e.currentList)},e.addCurrentList=function(){angular.forEach(e.collectTabs,function(t,i,n){t.choiced&&e.currentList.push(t)})},e.clearAll=function(){e.collectTabs.length&&n.confirm("确定清空收藏夹").then(function(){e.collectTabs=[],h(e.collectTabs),u(!0);var i=s(function(){t.dismiss(),n.alert("已清空收藏夹"),s.cancel(i)},500)})},e.yes=function(){e.addCurrentList(),t.close(e.currentList)},e.no=function(){t.dismiss()}}]}).result.then(function(t){t.length>0&&angular.forEach(t,function(t,i,n){angular.forEach(e.tabs,function(i,n,s){t.id!=i.id&&e.openTab(t.id,t.src,t.name)})})})},e.refresh=function(e){document.getElementById("tabIFrame_"+e.id).contentWindow.location.reload(!0)};var b=function(){if(localStorage.getItem("userSettings")){var t=JSON.parse(localStorage.getItem("userSettings"));t.tabNav?e.appSetting.tabNav=!0:t.tabNav||(e.appSetting.tabNav=!1)}};e.myAuthority=function(){var t={src:"./account/account.jsp",id:"41042519920422",name:"我的账户"};e.openTab(t.id,t.src,t.name)};b(),window.removeTab=v,u(!0)}]),angular.module("uia").factory("uiaConfigProvider",[function(){return{}}]).directive("uiaDate",["uibDateParser","$filter",function(e,t){var i=t("date");return{require:"ngModel",scope:{uiaDateOption:"="},link:function(t,n,s,a){var r=t.uiaDateOption,o=angular.extend({format:"yyyy-mm-dd",autoclose:!0,todayBtn:!0,minView:2,startDate:e.parse("1900-01-01","yyyy-MM-dd"),endDate:e.parse("2100-01-01","yyyy-MM-dd"),forceParse:!0,keyboardNavigation:!0,pickerPosition:"bottom-left",language:"zh-CN"},r);"month"==o.valueType&&(o.format="yyyy-mm",o.startView=3,o.minView=3),"year"==o.valueType&&(o.format="yyyy",o.startView=4,o.minView=4),$(n).datetimepicker(o).on("change",function(){t.$apply(function(){a.$setViewValue(n.val())})}).addClass("date").attr("readonly",!0),a.$formatters.push(function(e){return angular.isNumber(e)&&"yyyy-mm-dd"==o.format?i(e,"yyyy-MM-dd"):e}),a.$parsers.unshift(function(t){return angular.isString(t)&&t.length>0?"yyyy-MM-dd"==o.valueType?t:"year"==o.valueType?parseInt(t):new RegExp(/^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)/).test(t)?new Date(e.parse(t,"yyyy-MM-dd")).getTime():t:angular.isNumber(t)&&t.length>0?"year"==o.valueType?t:new Date(e.parse(t,"yyyy-MM-dd")).getTime():t}),$(n).next("span").children("button").bind("click",function(){$(n).datetimepicker("show")}),$(n).next("span").children("button").bind("click",function(){$(n).datetimepicker("show")})}}}]),angular.module("uia").factory("uiaDialog",["$q","toaster","$uibModal",function(e,t,i){return{reload:function(e){var t={url:"/"};angular.extend(t,e);var i="";if(e.params){i="?";for(var n in e.params)null!==e.params[n]&&(i=i+n+"="+encodeURIComponent(e.params[n])+"&")}window.location.href=t.url+i},modal:function(e,t){var i={url:"/"};angular.extend(i,e);var n="";if(e.params){n="?";for(var s in e.params)angular.isDefined(e.params[s])&&(n=n+s+"="+encodeURIComponent(e.params[s])+"&")}t&&window.open(i.url+n,"_blank",t),window.open(i.url+n,"_blank","status,scrollbars=yes,resizable,left=10,top=0,width=1000,height=600")},modalTab:function(e,t){if(!e.id||!e.url||!e.name)throw new Error("$dialog.modalTab parameter: 'id', 'url', 'name' property value must be not null");var i="";if(e&&e.params){i="?";for(var n in e.params)null!==e.params[n]&&(i=i+n+"="+encodeURIComponent(e.params[n])+"&")}e&&e.id&&(e.id=e.id.replace(".","")),window.top.PortalTab?window.top.PortalTab.open(e.id,e.url+i,e.name,null):(t&&window.open(e.url+i,"_blank",t),window.open(e.url+i,"_blank","status,scrollbars=yes,resizable,left=10,top=0,width=1000,height=600"))},alert:function(e){var i={type:"info",timeout:5e3,bodyOutputType:"trustedHtml"};angular.isObject(e)||(i.text=e),angular.extend(i,e),t.pop(i.type,i.title,i.text,i.timeout,i.bodyOutputType)},cancel:function(){return this.confirm("存在已修改且未保存的数据，是否确认关闭？")},confirm:function(t,i){var n,s;n=e.defer();var a={btn:["确认","取消"]};return i&&(a=angular.extend(a,i)),(s=window.parent?parent.layer:layer).confirm(t,a,function(e){s.close(e),n.resolve()},function(e){s.close(e),n.reject()}),n.promise}}}]),angular.module("uia").factory("uiaDictionaryConfig",[function(){return{restApi:null}}]).directive("uiaSelect",["uiaDictionaryConfig","$compile","$timeout",function(e,t,i){return{restrict:"A",scope:{dictCode:"=",dictParentCode:"=",dictSource:"=",ngModel:"="},require:["?ngModel","select"],link:function(t,i,n,s){if(t.isChange=!1,angular.isUndefined(n.dictCode))throw new Error("directive dict must be define 'dict-code'.");t.dictCode=t.dictCode||n.dictCode,angular.isDefined(n.dictParentCode)&&t.$watch("dictParentCode",function(e,i){e!=i&&(e?a():(t.dictInfoList=[],t.ngModel=null))}),angular.isDefined(n.dictSource)&&(t.dictSource=n.dictSource),t.$watch("ngModel",function(e,i){null==e&&(t.ngModel=null),e!=i&&angular.forEach(t.dictInfoList,function(e,i){var n=t.ngModel;e.dictCode==n&&(t.dictInfoList[i].selected=!0)})});var a=function(){t.dictInfoList=[],e.restApi.query({parentCode:t.dictParentCode,dictSource:t.dictSource,typeCode:t.dictCode}).$promise.then(function(e){t.dictInfoList=e;var i=!0;angular.forEach(t.dictInfoList,function(e,n){var s=t.ngModel;e.dictCode==s&&(t.dictInfoList[n].selected=!0,i=!1)}),i&&(t.ngModel=null)})};(!angular.isDefined(n.dictParentCode)||angular.isDefined(n.dictParentCode)&&t.dictParentCode)&&a()}}}]),angular.module("uia").directive("uiaForm",function(){return{restrict:"A",require:"form",link:function(e,t,i,n){n.lock=function(){s(!0),n.locked=!0},n.unlock=function(){s(!1),n.locked=!1};var s=function(e){$(t).find("input,select,textarea").each(function(){void 0==$(this).attr("igonre-disabled")&&$(this).attr("disabled",e)})}}}}),angular.module("uia").directive("htmlBind",function(e,t){return{restrict:"A",link:function(i,n,s){i.$watch(s.content,function(){n.html(t(s.content)(i)),e(n.contents())(i)},!0)}}}).directive("gridButtonGroup",[function(){return{require:"^uiaGrid",link:function(e,t,i,n){e.$watch(function(){return n[i.ngTransclude]},function(e){e&&(t.html(""),t.append(e))})}}}]).directive("columnTemplate",[function(){return{restrict:"E",require:"^column",scope:!1,link:function(e,t,i,n,s){e.setTemplate(t[0].innerHTML)}}}]).directive("column",["$parse","$compile",function(e,t){return{restrict:"E",require:"^uiaGrid",scope:!1,controller:["$scope",function(e){e.setTemplate=function(t){e.column.templateHtml=t}}],link:function(e,t,i,n){var s={name:i.name,title:i.title,templateHtml:i.templateHtml};e.column=s,e.$parent.gridOption.columns||(e.$parent.gridOption.columns={}),e.$parent.gridOption.columns[i.name]=s}}}]).controller("UiaGridController",["$scope","$filter","uiaDialog",function(e,t,i){var n={reviseBtnShow:function(){var t="0.0";e.reviseData=null;for(var i=0,n=e.gridOption.data.length;i<n;++i){var s=e.gridOption.data[i].fversion,a=e.gridOption.data[i].fisnew;parseInt(s)>parseInt(t)&&(t=s,a?(!0,e.reviseData=e.gridOption.data[i]):!1)}return!1}};e.gridOption=angular.extend(n,e.gridOption),e.queryParams={},e.gridOption.pageInfo={pageSize:10,pageNum:1},e.search=function(){e.gridOption.queryParams=e.queryParams;var t=angular.copy(e.gridOption.queryParams)||{};t.pageSize=e.gridOption.pageInfo.pageSize,t.pageNum=e.gridOption.pageInfo.pageNum,t.orderBy=e.queryParams.orderBy,angular.forEach(t,function(e,i){"undefined"!=i&&"nulll"!=i||delete t[i]});var i,n=e.gridOption.loadEvent(t);n.$promise?i=n.$promise:n.then&&angular.isFunction(n.then)&&(i=n),i.then(function(t){e.gridOption.data=t.data,e.gridOption.pageInfo=t.pageInfo})};!function(e){angular.forEach(e,function(t,i){e[i].placeholder||(e[i].placeholder="请输入"+e[i].title)})}(e.gridOption.filters),e.formatterValue=function(e,i){switch(i.type){case"date":return i.formatter?t("date")(e,i.formatter):t("date")(e,"yyyy-MM-dd hh:ss:mm");case"currency":return i.formatter?t("currency")(e,i.formatter):t("currency")(e,"");case"myriabit":return i.formatter?t("currency")(e,i.formatter,4):t("currency")(e,"",4);case"number":var n=2;return i.fractionSize&&(n=i.fractionSize),t("number")(e,n);default:return e}},e.currentChoiceItem=null,e.choiceEvent=function(t){e.currentChoiceItem&&e.currentChoiceItem.$$hashKey==t.$$hashKey?e.currentChoiceItem=null:(e.currentChoiceItem=t,e.currentChoiceItem.isChoice=!!e.currentChoiceItem.isChoice)},e.iconsort=!1,e.sort=function(t){e.iconsort=t," DESC "!=e.queryParams.sortRule?(e.sortway=!1,e.queryParams.sortRule=" DESC "):(e.sortway=!0,e.queryParams.sortRule=""),e.queryParams.orderBy=t+e.queryParams.sortRule,e.search()},e.removeEvent=function(){if(e.currentChoiceItem){if(!angular.isFunction(e.gridOption.removeBtn.click))throw new Error("gridOption.removeBtn.click must be define.");e.gridOption.removeBtn.click(e.currentChoiceItem)}else i.alert("请先选择单据")},e.viewEvent=function(t){var n;if(!e.gridOption.viewBtn||t||e.currentChoiceItem){angular.isObject(e.gridOption.viewBtn)&&angular.isFunction(e.gridOption.viewBtn.handlerParam)&&(n=e.gridOption.viewBtn.handlerParam(e.currentChoiceItem));i.modalTab({id:parseInt(9e4*Math.random()+1e4,10)+"",name:e.gridOption.title,url:e.gridOption.viewBtn.link,params:n})}else i.alert("请先选择单据")},e.addEvent=function(){var t;angular.isFunction(e.gridOption.addBtn.handlerParam)&&(t=e.gridOption.addBtn.handlerParam());i.modalTab({id:parseInt(9e4*Math.random()+1e4,10)+"",name:e.gridOption.title,url:e.gridOption.addBtn.link,params:t})},e.reviseEvent=function(){var t;if(!e.gridOption.data||e.gridOption.data.length<1)i.alert("未找到已审核的可修订数据");else{angular.isFunction(e.gridOption.reviseBtn.handlerParam)&&(t=e.gridOption.reviseBtn.handlerParam(e.reviseData));i.modalTab({id:parseInt(9e4*Math.random()+1e4,10)+"",name:e.gridOption.title,url:e.gridOption.reviseBtn.link,params:t})}},e.dbcEvent=function(t){e.currentChoiceItem=t,e.viewEvent(e.currentChoiceItem)},e.reset=function(){e.queryParams={},e.search()};e.gridOption.queryParams&&(e.queryParams=e.gridOption.queryParams),e.search()}]).directive("uiaGrid",[function(){return{restrict:"E",replace:!0,transclude:!0,scope:{gridOption:"="},link:function(e,t,i,n){if(!i.gridOption)throw new Error('the "uia-grid" directive must be define "grid-option"')},templateUrl:function(e,t){return t.templateUrl||"uia/template/grid.html"},controller:"UiaGridController"}}]),angular.module("uia").factory("uiaMessage",["$rootScope",function(e){return{publish:function(t,i){t=t||"_DATA_UPDATED_",e.$emit(t,i)},subscribe:function(t,i,n){if(angular.isFunction(i)){t=t||"_DATA_UPDATED_";var s=e.$on(t,i);n&&n.$on("$destroy",s)}else console.log("pubSubService.subscribe need a callback function")}}}]),angular.module("uia").directive("uiaNumber",["$timeout",function(e){return{require:"ngModel",scope:{uiaNumberOption:"=?",numberType:"@"},link:function(e,t,i,n){var s={};switch(e.uiaNumberOption=e.uiaNumberOption||{},e.uiaNumberOption=angular.extend(s,e.uiaNumberOption),i.numberType&&(e.uiaNumberOption.type=e.numberType),angular.copy(e.uiaNumberOption.type)){case"percentage":$(t).inputmask({alias:"percentage",placeholder:"",suffix:" % ",max:9999999999,autoUnmask:!0,rightAlign:!0,onUnMask:function(e,t){var i=parseFloat(t);return i&&!isNaN(i)&&(i/=100),i}}),n.$formatters.push(function(e){if(""!=e&&null!=e&&void 0!=e){var t=parseFloat(e);if(!isNaN(t)&&angular.isNumber(t))return 100*e}return e});break;case"integer":$(t).inputmask({alias:"integer",digits:0,suffix:" ",placeholder:"",max:999999999999,rightAlign:!0});break;case"decimal":$(t).inputmask({alias:"numeric",placeholder:"",suffix:" ",max:999999999999,rightAlign:!0});break;case"million":$(t).inputmask({alias:"currency",placeholder:"",suffix:" ",autoUnmask:!0,prefix:"",digits:4});break;case"currency":$(t).inputmask({alias:"currency",placeholder:"",suffix:" ",autoUnmask:!0,prefix:"",digits:2})}}}}]),angular.module("uia").directive("uiaPagination",[function(){return{restrict:"E",replace:!0,transclude:!0,scope:{pageInfo:"=",loadParameter:"=",loadEvent:"&"},templateUrl:function(e,t){return t.templateUrl||"uia/template/pagination.html"},controller:["$scope","$attrs",function(e,t){e.maxSize="10",e.pageInfo=angular.extend(e.pageInfo,{showSkip:!0,showTotal:!0,total:0,showPageNum:!0,pageSize:10,pageNum:1,styleCss:1}),e.$watch("pageInfo",function(t,i){t&&t!==i&&e.load()}),e.load=function(){e.curPage=e.pageInfo.pageNum,e.pageSize=e.pageInfo.pageSize,e.total=e.pageInfo.total?e.pageInfo.total:0,e.pageInfo.pages?e.pages=e.pageInfo.pages:e.pages=1,e.pageList=[];for(var t=1;t<=e.pages;t++){var i={isDisabled:!1,num:t,isOmit:!1,text:"",isShow:!0};if(i.num==e.curPage&&(i.isDisabled=!0),e.pages<7)e.pageList.push(i);else{if(1==t){e.pageList.push(i);continue}if(t==e.pages){e.pageList.push(i);continue}if(e.curPage>=1&&e.curPage<=e.pages&&(e.curPage-1==t||e.curPage+1==t||t==e.curPage)){if(e.curPage-1==t&&t!=e.curPage)(n=angular.copy(i)).isOmit=!0,n.text="...",n.num="...",e.pageList.push(i);else if(e.curPage+1==t&&t!=e.curPage){e.pageList.push(i);var n=angular.copy(i);n.isOmit=!0,n.text="...",n.num="...",e.pages}t==e.curPage&&e.pageList.push(i)}}}},e.$watch("maxSize",function(i,n){if(i!=n){var s=parseInt(n),a=parseInt(i);s<a?(e.pageInfo.pageNum=1,e.pageInfo.pageSize=a):e.pageInfo.pageSize=a,t.loadEvent?e.loadEvent():e.pageInfo.loadData()}}),e.skipPage=function(i){(i=parseInt(i))<=e.pages&&i>=1?e.pageInfo.pageNum=i:i>e.pages?(e.pageInfo.pageNum=angular.copy(e.pages),e.inPageNo=angular.copy(e.pages)):i<1&&(e.pageInfo.pageNum=1,e.inPageNo=1),t.loadEvent?e.loadEvent():e.pageInfo.loadData()},e.$watch("loadParameter",function(i,n){i!=n&&(e.pageInfo.pageNum=1,t.loadEvent?e.loadEvent():e.pageInfo.loadData())},!0),e.load()}]}}]),angular.module("uia").factory("HttpInterceptor",["$q","$injector",function(e,t){var i,n;return{request:function(e){return window.top.setSessionTimeout&&angular.isFunction(window.top.setSessionTimeout)&&window.top.setSessionTimeout((new Date).getTime()),"GET"==e.method&&("XMLHttpRequest"!=e.headers["X-Requested-With"]||e.cache||(e.params?e.params._noCache=(new Date).getTime():e.params={noCache:(new Date).getTime()})),e},responseError:function(s,a){return n=n||t.get("uiaDialog"),i=i||t.get("uiaMessage"),400==s.status?n.alert(s.data.message):500==s.status?n.alert("系统错误，请联系管理员"):401==s.status&&(i.publish("SessionTimeOut"),e.reject(s)),e.reject(s)}}}]).config(["$httpProvider","$qProvider",function(e,t){t.errorOnUnhandledRejections(!1),e.interceptors.push("HttpInterceptor"),e.defaults.headers.common["X-Requested-With"]="XMLHttpRequest"}]),angular.module("uia").directive("uiaTable",["$compile",function(e){return{restrict:"A",scope:{uiaTableOption:"=",loadEvent:"=",loadParams:"=",tableResultData:"="},link:function(t,i,n,s){t.uiaTableOption=angular.extend({pageInfo:{pageSize:10,pageNum:1}},t.uiaTableOption),t.uiaTableOption.load=function(){t.uiaTableOption.loadParams=t.loadParams;var e=angular.copy(t.uiaTableOption.loadParams)||{};e.pageSize=t.uiaTableOption.pageInfo.pageSize,e.pageNum=t.uiaTableOption.pageInfo.pageNum;var i,n=t.uiaTableOption.loadEvent(e);n.$promise?i=n.$promise:n.then&&angular.isFunction(n.then)&&(i=n),i.then(function(e){t.uiaTableOption.data=e.data,t.uiaTableOption.pageInfo=e.pageInfo,t.tableResultData=t.uiaTableOption.data,t.uiaTableOption.success&&angular.isFunction(t.uiaTableOption.success)&&t.uiaTableOption.success(e)})};var a=e('<uia-pagination page-info="uiaTableOption.pageInfo" load-parameter="uiaTableOption.queryParam" load-event="uiaTableOption.load()"></uia-pagination>')(t);angular.element(i).parent().parent().parent().append(a),t.uiaTableOption.loadParams=t.uiaTableOption.loadParams||{},t.uiaTableOption.load()}}}]),angular.module("uia").run(["$uiaValidateRule","$uiaValidateProvider",function(e,t){angular.forEach(e,function(e,i){t.addRule(i,e)}),$.extend($.validator.messages,{required:"这是必填字段",remote:"请修正此字段",email:"请输入有效的电子邮件地址",url:"请输入有效的网址",date:"请输入有效的日期",dateISO:"请输入有效的日期 (YYYY-MM-DD)",number:"请输入有效的数字",digits:"请输入有效的正整数",creditcard:"请输入有效的信用卡号码",equalTo:"你的输入不相同",extension:"请输入有效的后缀",maxlength:$.validator.format("最多可以输入 {0} 个字符"),minlength:$.validator.format("最少要输入 {0} 个字符"),rangelength:$.validator.format("请输入长度在 {0} 到 {1} 之间的字符串"),range:$.validator.format("请输入范围在 {0} 到 {1} 之间的数值"),max:$.validator.format("请输入不大于 {0} 的数值"),min:$.validator.format("请输入不小于 {0} 的数值")})}]).value("$uiaValidateRule",{integer:{rule:/^\-?[0-9]+$/,message:"请输入正确的整数"},positiveDecimal:{rule:/^[0-9]*\.?[0-9]+$/,message:"请输入不小于0的数字"},notSpecialCharacter:{rule:/^[A-Za-z0-9]+$/i,message:"请输入大小写字母或数字"},chinaId:{rule:/^[1-9]\d{5}[1-9]\d{3}(((0[13578]|1[02])(0[1-9]|[12]\d|3[0-1]))|((0[469]|11)(0[1-9]|[12]\d|30))|(02(0[1-9]|[12]\d)))(\d{4}|\d{3}[xX])$/,message:"请输入正确的身份证号码"},chinaZip:{rule:/^\d{6}$/,message:"请输入正确的邮政编码"},telephone:{rule:/^(1)[0-9]{10}$/,message:"请输入正确的手机号码"},ip:{rule:/^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$/,message:"请输入正确的IP"},latitude:{rule:/^-?(([1-8]\d?)|([1-8]\d)|90)(\.\d{1,6})?$/,message:"请输入[±90.000000]的有效纬度值"},longitude:{rule:/^-?(([1-9]\d?)|(1[0-7]\d)|180)(\.\d{1,6})?$/,message:"请输入[±180.000000]的有效经度值"}}).constant("$uiaValidateDefault",{errorElement:"font",errorClass:"error",onblur:function(e){$(e).valid()},showErrors:function(e,t){return $.each(this.successList,function(e,t){return $(t).popover?$(t).popover("hide"):null}),$.each(t,function(e,t){var i;return i=$(t.element).popover({trigger:"manual",placement:"top",content:t.message,html:!0,template:'<div class="popover error-popover"><div class="arrow"></div> <div class="popover-inner"> <div class="popover-content"><p></p></div> </div></div>'}),i.data("bs.popover").options.content=t.message,i.popover("show")})}}).factory("$uiaValidateProvider",function(){return{setDefaults:function(e){$.validator.setDefaults(e)},addMethod:function(e,t,i){$.validator.addMethod(e,t,i)},addRule:function(e,t){this.addMethod(e,function(e,i){var n=new RegExp(t.rule);return!1!==e&&!(""!=e&&!n.test(e))},t.message)}}}).directive("uiaValidate",["$uiaValidateDefault",function(e){return{restrict:"A",scope:{uiaValidateOption:"="},require:"form",link:function(t,i,n,s){n.ignoreTip&&"true"==n.ignoreTip&&(s.ignoreTip=!0);var a=t.uiaValidateOption;a=angular.extend(e,a),s.validateConfig=angular.copy(a),s.validate=function(){return!(!$(i).validate(s.validateConfig).form()||!$(i).validate(s.validateConfig).valid())};var r="<span class='error'> *</span>";$(i).find("input[required]").each(function(){var e=$(this).next();"hidden"==this.type||null!=e[0]&&"SPAN"==e[0].nodeName||$(r).insertAfter(this)}),$(i).find("select[required]").each(function(){var e=$(this).next();null!=e[0]&&"SPAN"==e[0].nodeName||$(r).insertAfter(this)}),$(i).find("input[ug-date]").datetimepicker&&$(i).find("input[ug-date]").datetimepicker().on("changeDate",function(e){$(e.target).valid()})}}}]),angular.module("uia").factory("ChoiceWidgetTemplateStore",[function(){var e={};return{defineManyTemplate:function(t){t.forEach(t,function(t,i){if(e[i])throw new Error('The choiceWidgetType name "'+i+'" choice-widget exist in templates, please change the key name');e[i]=t})},defineTemplate:function(t,i){if(e[t])throw new Error('The choiceWidgetType name "'+t+'" choice-widget exist in templates, please change the key name');e[t]=i},getTemplate:function(t){if(!e[t])throw new Error('The choiceWidgetType name "'+t+'" choice-widget not exist in templates');return e[t]}}}]).directive("uiaChoice",["$compile","ChoiceWidgetTemplateStore","uiaDialog","$timeout","$filter",function(e,t,i,n,s){return{restrict:"A",transclude:!0,require:"ngModel",scope:{choiceOption:"=?",ngModel:"=",choiceModelLabel:"=",choiceValueKey:"@?",choiceLabelKey:"@?",choiceWidgetType:"@",parentConstraint:"=?"},link:function(e,t,i,s){angular.element(t).attr("readonly",!0),t.on("click",function(t){e.openInfoList()}),s.$formatters.push(function(i){return e.choiceModelLabel&&n(function(){t.val(e.choiceModelLabel)}),i})},controller:["$scope","$attrs","$element","$uibModal","uiaDialog",function(e,i,n,s,a){e.openInfoList=function(){if(e.choiceOption=angular.extend({},e.choiceOption),i.choiceWidgetType&&(e.choiceOption.choiceWidgetType=i.choiceWidgetType),e.choiceOption.choiceWidgetType){var r=t.getTemplate(e.choiceOption.choiceWidgetType);i.choiceValueKey&&(e.choiceOption.choiceValueKey=e.choiceValueKey),i.parentConstraint&&(e.choiceOption.parentConstraint=e.parentConstraint),i.choiceLabelKey&&(e.choiceOption.choiceLabelKey=e.choiceLabelKey),e.choiceOption=angular.extend(e.choiceOption,r)}else a.alert("if you want to matching code, your widget-choice-type must be true.");s.open({templateUrl:"uia/template/choice.html",windowClass:"widget-choice",resolve:{option:function(){return e.choiceOption?e.choiceOption:null}},controller:["$scope","$uibModalInstance","option","$filter",function(e,t,i,n){function s(){angular.forEach(e.dataList,function(t){t.isChoiced&&e.currentObjList.push(t)})}e.option=angular.extend({},angular.copy(i)),e.queryParam={},e.current=function(t){e.currentObjList=[],e.option.multiple?t.isChoiced=!t.isChoiced:(angular.forEach(e.dataList,function(e){e.isChoiced=!1}),t.isChoiced=!0)},e.choice=function(){s(),t.close(e.currentObjList)},e.currentSave=function(t){t.isChoiced=!0,e.choice()},e.cancel=function(){t.dismiss("cancel")},e.clear=function(){t.dismiss("clear")},e.formatter=function(e,t){return n(t.filter)(e,t.formatter)},e.pageInfoSetting={pageSize:10,pageNum:1},e.loadParams={},e.loadParams=e.pageInfoSetting,e.option.handleParams&&(e.loadParams=e.option.handleParams(e.loadParams,i));var a="pageSize",r="pageNum";e.option.pageSetting&&(e.loadParams[e.option.pageSetting.pageNumName]=e.loadParams.pageNum,e.loadParams[e.option.pageSetting.pageSizeName]=e.loadParams.pageSize,e.option.pageSetting.pageNumName&&(r=e.option.pageSetting.pageNumName),e.option.pageSetting.pageSizeName&&(a=e.option.pageSetting.pageSizeName)),e.loadDataList=function(){if(!e.option.hidePagination&&e.queryParams)for(var t in e.queryParams)e.loadParams[t]=e.queryParams[t];e.pageInfoSetting&&(e.loadParams[r]=e.pageInfoSetting.pageNum,e.loadParams[a]=e.pageInfoSetting.pageSize),e.option.parentConstraint&&e.option.parentName&&(e.loadParams[e.option.parentName]=e.option.parentConstraint),(e.option.loadEvent(e.loadParams).$promise||e.option.loadEvent(params)).then(function(t){t.data?(console.log(t.data),e.dataList=t.data,e.pageInfoSetting=t.pageInfo):e.dataList=[]})},e.reset=function(){if(e.queryParams){for(var t in e.queryParams)e.loadParams[t]="";e.queryParams={}}e.loadDataList()},e.iconsort=!1,e.sort=function(t){e.option.sort&&(e.iconsort=t,e.activeThis=t,e.queryParam.sort&&e.queryParam.sort===t?(e.queryParam.sort="-"+t,e.sortway=!0):(e.queryParam.sort=t,e.sortway=!1),e.dataList=n("orderBy")(e.dataList,e.queryParam.sort,!0))},e.option&&(e.option.loadEvent&&e.loadDataList(),e.option.filters&&(e.option.showFilter=!0,e.queryParams={},angular.forEach(e.option.filters,function(e){e.placeholder||(e.placeholder="请输入"+e.title)})),e.option.hidePagination&&(e.option.hidePagination=!0),e.option.multiple&&(e.option.multiple=!0)),console.log(e.option)}]}).result.then(function(t){if(n.parents("form")&&n.parents("form")[0]&&n.parents("form")[0].name&&n.parents("form").scope()[n.parents("form")[0].name]&&n.parents("form").scope()[n.parents("form")[0].name].$setDirty&&n.parents("form").scope()[n.parents("form")[0].name].$setDirty(),angular.isDefined(e.choiceOption.choiceModelLabel))if(e.choiceOption.handleResult&&e.choiceOption.handleResult.choiceModelLabel)e.choiceOption.multiple?e.choiceModelLabel=e.choiceOption.handleResult.choiceModelLabel(t):(angular.isUndefined(e.choiceModelLabel)&&(e.choiceModelLabel=""),e.choiceModelLabel=e.choiceOption.handleResult.choiceModelLabel(t[0]));else if(e.choiceOption.multiple){if(!e.choiceOption.choiceLabelKey)throw new Error("The choice-widget use 'multiple' property and 'choice-model-mabel' directive must be define 'choiceLabelKey' property");var s=null;angular.forEach(t,function(t,i){s=null==s?t[e.choiceOption.choiceLabelKey]:s+";"+t[e.choiceOption.choiceLabelKey]}),null!=s&&(e.choiceModelLabel=s+";")}else angular.isUndefined(e.choiceModelLabel)&&(e.choiceModelLabel=""),e.choiceModelLabel=t[0][e.choiceOption.choiceLabelKey];angular.isDefined(i.ngModel)&&(e.choiceOption.handleResult&&e.choiceOption.handleResult.ngModel?e.choiceOption.multiple?e.ngModel=e.choiceOption.handleResult.ngModel(t):e.ngModel=e.choiceOption.handleResult.ngModel(t[0]):e.choiceOption.multiple?e.ngModel=t:e.ngModel=t[0][e.choiceOption.choiceValueKey]),angular.isDefined(i.choiceOption)&&e.choiceOption&&e.choiceOption.onChoice&&e.choiceOption.onChoice(t)},function(t){"clear"==t&&(n.parents("form")&&n.parents("form")[0]&&n.parents("form")[0].name&&n.parents("form").scope()[n.parents("form")[0].name]&&n.parents("form").scope()[n.parents("form")[0].name].$setDirty&&n.parents("form").scope()[n.parents("form")[0].name].$setDirty(),angular.isDefined(i.choiceOption)&&e.choiceOption&&e.choiceOption.onChoice&&e.choiceOption.onChoice([]),angular.isDefined(i.ngModel)&&(e.choiceOption&&e.choiceOption.multiple?e.ngModel=[]:e.ngModel=""),angular.isDefined(e.choiceOption.choiceModelLabel)&&(e.choiceModelLabel=""))})}}]}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
